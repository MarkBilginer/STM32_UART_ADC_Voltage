
STM32_UART_ADC_Voltage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c00  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e04  08004e04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e0c  08004e0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004e20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004e20  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001234f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228f  00000000  00000000  0003238b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00035750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fc7  00000000  00000000  00036798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f69  00000000  00000000  0005875f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d764f  00000000  00000000  0006a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b0  00000000  00000000  00141d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004d74 	.word	0x08004d74

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004d74 	.word	0x08004d74

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <init_hal>:
UART_HandleTypeDef huart2;



void init_hal()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_Init();
 80004c8:	f000 fd0f 	bl	8000eea <HAL_Init>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <tim_base_start_interrupt>:


void tim_base_start_interrupt()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <tim_base_start_interrupt+0x10>)
 80004d6:	f003 fbe7 	bl	8003ca8 <HAL_TIM_Base_Start_IT>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	2000008c 	.word	0x2000008c

080004e4 <strlength>:

unsigned int strlength(char *p)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	unsigned int count = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]

	while(*p!='\0')
 80004f0:	e005      	b.n	80004fe <strlength+0x1a>
	{
		count++;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
		p++;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
	while(*p!='\0')
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1f5      	bne.n	80004f2 <strlength+0xe>
	}

	return count;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <power>:

/* Function to calculate x raised to the power y */
int power(int x, unsigned int y)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	if (y == 0)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <power+0x14>
		return 1;
 8000524:	2301      	movs	r3, #1
 8000526:	e028      	b.n	800057a <power+0x66>
	else if (y%2 == 0)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d110      	bne.n	8000554 <power+0x40>
		return power(x, y/2)*power(x, y/2);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	085b      	lsrs	r3, r3, #1
 8000536:	4619      	mov	r1, r3
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f7ff ffeb 	bl	8000514 <power>
 800053e:	4604      	mov	r4, r0
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ffe4 	bl	8000514 <power>
 800054c:	4603      	mov	r3, r0
 800054e:	fb03 f304 	mul.w	r3, r3, r4
 8000552:	e012      	b.n	800057a <power+0x66>
	else
		return x*power(x, y/2)*power(x, y/2);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	085b      	lsrs	r3, r3, #1
 8000558:	4619      	mov	r1, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff ffda 	bl	8000514 <power>
 8000560:	4602      	mov	r2, r0
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	fb03 f402 	mul.w	r4, r3, r2
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	085b      	lsrs	r3, r3, #1
 800056c:	4619      	mov	r1, r3
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffd0 	bl	8000514 <power>
 8000574:	4603      	mov	r3, r0
 8000576:	fb03 f304 	mul.w	r3, r3, r4
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bd90      	pop	{r4, r7, pc}
	...

08000584 <uart_print>:

void uart_print(char text[])
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) text, strlength(text), 100);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ffa9 	bl	80004e4 <strlength>
 8000592:	4603      	mov	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <uart_print+0x24>)
 800059c:	f003 ffb6 	bl	800450c <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000d8 	.word	0x200000d8

080005ac <reverse>:


// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	3b01      	subs	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80005c0:	e018      	b.n	80005f4 <reverse+0x48>
		temp = str[i];
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	441a      	add	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	440b      	add	r3, r1
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
		i++;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
		j--;
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	dbe2      	blt.n	80005c2 <reverse+0x16>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
	while (x) {
 800061c:	e01d      	b.n	800065a <intToStr+0x4e>
		str[i++] = (x % 10) + '0';
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <intToStr+0x8c>)
 8000622:	fb83 1302 	smull	r1, r3, r3, r2
 8000626:	1099      	asrs	r1, r3, #2
 8000628:	17d3      	asrs	r3, r2, #31
 800062a:	1ac9      	subs	r1, r1, r3
 800062c:	460b      	mov	r3, r1
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	1ad1      	subs	r1, r2, r3
 8000636:	b2ca      	uxtb	r2, r1
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	1c59      	adds	r1, r3, #1
 800063c:	6179      	str	r1, [r7, #20]
 800063e:	4619      	mov	r1, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	440b      	add	r3, r1
 8000644:	3230      	adds	r2, #48	; 0x30
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <intToStr+0x8c>)
 800064e:	fb82 1203 	smull	r1, r2, r2, r3
 8000652:	1092      	asrs	r2, r2, #2
 8000654:	17db      	asrs	r3, r3, #31
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	60fb      	str	r3, [r7, #12]
	while (x) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1de      	bne.n	800061e <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d) {
 8000660:	e007      	b.n	8000672 <intToStr+0x66>
		str[i++] = '0';
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	617a      	str	r2, [r7, #20]
 8000668:	461a      	mov	r2, r3
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	701a      	strb	r2, [r3, #0]
	while (i < d) {
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	dbf3      	blt.n	8000662 <intToStr+0x56>
	}

	reverse(str, i);
 800067a:	6979      	ldr	r1, [r7, #20]
 800067c:	68b8      	ldr	r0, [r7, #8]
 800067e:	f7ff ff95 	bl	80005ac <reverse>
	str[i] = '\0';
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	4413      	add	r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	return i;
 800068c:	697b      	ldr	r3, [r7, #20]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	66666667 	.word	0x66666667

0800069c <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80006a6:	60b8      	str	r0, [r7, #8]
 80006a8:	6079      	str	r1, [r7, #4]
	// Extract integer part
	int ipart = (int)n;
 80006aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b2:	ee17 3a90 	vmov	r3, s15
 80006b6:	61fb      	str	r3, [r7, #28]

	// Extract floating part
	float fpart = n - (float)ipart;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	ee07 3a90 	vmov	s15, r3
 80006be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80006c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ca:	edc7 7a06 	vstr	s15, [r7, #24]

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	69f8      	ldr	r0, [r7, #28]
 80006d4:	f7ff ff9a 	bl	800060c <intToStr>
 80006d8:	6178      	str	r0, [r7, #20]

	// check for display option after point
	if (afterpoint != 0) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d021      	beq.n	8000724 <ftoa+0x88>
		res[i] = '.'; // add dot
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	4413      	add	r3, r2
 80006e6:	222e      	movs	r2, #46	; 0x2e
 80006e8:	701a      	strb	r2, [r3, #0]

		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * power(10, afterpoint);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4619      	mov	r1, r3
 80006ee:	200a      	movs	r0, #10
 80006f0:	f7ff ff10 	bl	8000514 <power>
 80006f4:	ee07 0a90 	vmov	s15, r0
 80006f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000704:	edc7 7a06 	vstr	s15, [r7, #24]

		intToStr((int)fpart, res + i + 1, afterpoint);
 8000708:	edd7 7a06 	vldr	s15, [r7, #24]
 800070c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	4413      	add	r3, r2
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4619      	mov	r1, r3
 800071c:	ee17 0a90 	vmov	r0, s15
 8000720:	f7ff ff74 	bl	800060c <intToStr>
	}
}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_TIM_PeriodElapsedCallback>:
 *
 *  @param htim TIM handle
 *  @return None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	float adc_reading;
	float reading_voltage;
	char reading_voltage_str[5];
	float resolution_adc = 4096;
 8000734:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
	float sys_voltage = 3.33f;
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
	char str1[] = "Measured: ";
 800073e:	4a23      	ldr	r2, [pc, #140]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	ca07      	ldmia	r2, {r0, r1, r2}
 8000746:	c303      	stmia	r3!, {r0, r1}
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	3302      	adds	r3, #2
 800074c:	0c12      	lsrs	r2, r2, #16
 800074e:	701a      	strb	r2, [r3, #0]
	char str2[] = "V\r\n";
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000752:	60bb      	str	r3, [r7, #8]

	HAL_ADC_Start(&hadc1);
 8000754:	481f      	ldr	r0, [pc, #124]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000756:	f000 ff9b 	bl	8001690 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800075a:	2164      	movs	r1, #100	; 0x64
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800075e:	f001 f82d 	bl	80017bc <HAL_ADC_PollForConversion>
	adc_reading = HAL_ADC_GetValue(&hadc1);
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000764:	f001 f8b9 	bl	80018da <HAL_ADC_GetValue>
 8000768:	ee07 0a90 	vmov	s15, r0
 800076c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000770:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	HAL_ADC_Stop(&hadc1);
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000776:	f000 ffee 	bl	8001756 <HAL_ADC_Stop>

	reading_voltage = (adc_reading * sys_voltage)/resolution_adc;
 800077a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800077e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000782:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000786:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800078a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800078e:	edc7 7a08 	vstr	s15, [r7, #32]
	ftoa(reading_voltage, reading_voltage_str, 1);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	ed97 0a08 	vldr	s0, [r7, #32]
 800079e:	f7ff ff7d 	bl	800069c <ftoa>

	uart_print(str1);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff feec 	bl	8000584 <uart_print>
	uart_print(reading_voltage_str);
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fee7 	bl	8000584 <uart_print>
	uart_print(str2);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fee2 	bl	8000584 <uart_print>
}
 80007c0:	bf00      	nop
 80007c2:	3730      	adds	r7, #48	; 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40551eb8 	.word	0x40551eb8
 80007cc:	08004d8c 	.word	0x08004d8c
 80007d0:	000a0d56 	.word	0x000a0d56
 80007d4:	20000028 	.word	0x20000028

080007d8 <config_system_clock>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void config_system_clock(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0ac      	sub	sp, #176	; 0xb0
 80007dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fabc 	bl	8004d64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2254      	movs	r2, #84	; 0x54
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 faae 	bl	8004d64 <memset>

	/** Configure LSE Drive Capability
	*/
	HAL_PWR_EnableBkUpAccess();
 8000808:	f002 f866 	bl	80028d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800080c:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <config_system_clock+0x124>)
 800080e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000812:	4a3a      	ldr	r2, [pc, #232]	; (80008fc <config_system_clock+0x124>)
 8000814:	f023 0318 	bic.w	r3, r3, #24
 8000818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800081c:	2314      	movs	r3, #20
 800081e:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000830:	2360      	movs	r3, #96	; 0x60
 8000832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800083c:	2301      	movs	r3, #1
 800083e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084e:	2307      	movs	r3, #7
 8000850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000864:	4618      	mov	r0, r3
 8000866:	f002 f8ab 	bl	80029c0 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <config_system_clock+0x9c>
		Error_Handler();
 8000870:	f000 f982 	bl	8000b78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	65bb      	str	r3, [r7, #88]	; 0x58
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000888:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fcb6 	bl	8003200 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <config_system_clock+0xc6>
		Error_Handler();
 800089a:	f000 f96d 	bl	8000b78 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800089e:	f244 0302 	movw	r3, #16386	; 0x4002
 80008a2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008b6:	2310      	movs	r3, #16
 80008b8:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ba:	2307      	movs	r3, #7
 80008bc:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ca:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fe9c 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <config_system_clock+0x106>
		Error_Handler();
 80008da:	f000 f94d 	bl	8000b78 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80008de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e2:	f002 f817 	bl	8002914 <HAL_PWREx_ControlVoltageScaling>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <config_system_clock+0x118>
		Error_Handler();
 80008ec:	f000 f944 	bl	8000b78 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	*/
	HAL_RCCEx_EnableMSIPLLMode();
 80008f0:	f003 f880 	bl	80039f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008f4:	bf00      	nop
 80008f6:	37b0      	adds	r7, #176	; 0xb0
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <init_adc1>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void init_adc1(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]

	/** Common config
	*/
	hadc1.Instance = ADC1;
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <init_adc1+0xbc>)
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <init_adc1+0xc0>)
 800091a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <init_adc1+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <init_adc1+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <init_adc1+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <init_adc1+0xbc>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <init_adc1+0xbc>)
 8000936:	2204      	movs	r2, #4
 8000938:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <init_adc1+0xbc>)
 800093c:	2200      	movs	r2, #0
 800093e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <init_adc1+0xbc>)
 8000942:	2200      	movs	r2, #0
 8000944:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <init_adc1+0xbc>)
 8000948:	2201      	movs	r2, #1
 800094a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <init_adc1+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <init_adc1+0xbc>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <init_adc1+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <init_adc1+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <init_adc1+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <init_adc1+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <init_adc1+0xbc>)
 8000978:	f000 fd42 	bl	8001400 <HAL_ADC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <init_adc1+0x86>
		Error_Handler();
 8000982:	f000 f8f9 	bl	8000b78 <Error_Handler>
	}
	/** Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_5;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <init_adc1+0xc4>)
 8000988:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800098a:	2306      	movs	r3, #6
 800098c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000992:	237f      	movs	r3, #127	; 0x7f
 8000994:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000996:	2304      	movs	r3, #4
 8000998:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <init_adc1+0xbc>)
 80009a4:	f000 ffa6 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <init_adc1+0xb2>
		Error_Handler();
 80009ae:	f000 f8e3 	bl	8000b78 <Error_Handler>
	}
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000028 	.word	0x20000028
 80009c0:	50040000 	.word	0x50040000
 80009c4:	14f00020 	.word	0x14f00020

080009c8 <init_timer1>:
  * @param None
  * @retval None
  */
void init_timer1(uint32_t prescaler, uint32_t cnt_mode, uint32_t period,
		uint32_t clk_div, uint32_t rep_cnt, uint32_t reload_preload_enable)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]

	htim1.Instance = TIM1;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <init_timer1+0xac>)
 80009f2:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <init_timer1+0xb0>)
 80009f4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <init_timer1+0xac>)
 80009f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <init_timer1+0xac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 32000;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <init_timer1+0xac>)
 8000a06:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000a0a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <init_timer1+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <init_timer1+0xac>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <init_timer1+0xac>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <init_timer1+0xac>)
 8000a20:	f003 f8ea 	bl	8003bf8 <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <init_timer1+0x66>
		Error_Handler();
 8000a2a:	f000 f8a5 	bl	8000b78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <init_timer1+0xac>)
 8000a3c:	f003 faa7 	bl	8003f8e <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <init_timer1+0x82>
		Error_Handler();
 8000a46:	f000 f897 	bl	8000b78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <init_timer1+0xac>)
 8000a5e:	f003 fc83 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <init_timer1+0xa4>
		Error_Handler();
 8000a68:	f000 f886 	bl	8000b78 <Error_Handler>
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	40012c00 	.word	0x40012c00

08000a7c <init_uart>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void init_uart(uint32_t baudrate)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	huart2.Instance = USART2;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <init_uart+0x60>)
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <init_uart+0x64>)
 8000a88:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <init_uart+0x60>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <init_uart+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <init_uart+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <init_uart+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <init_uart+0x60>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <init_uart+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <init_uart+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <init_uart+0x60>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <init_uart+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <init_uart+0x60>)
 8000ac4:	f003 fcd4 	bl	8004470 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <init_uart+0x56>
		Error_Handler();
 8000ace:	f000 f853 	bl	8000b78 <Error_Handler>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000d8 	.word	0x200000d8
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <init_gpio>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void init_gpio(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <init_gpio+0x8c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <init_gpio+0x8c>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <init_gpio+0x8c>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <init_gpio+0x8c>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <init_gpio+0x8c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <init_gpio+0x8c>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <init_gpio+0x8c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <init_gpio+0x8c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <init_gpio+0x8c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2108      	movs	r1, #8
 8000b46:	480b      	ldr	r0, [pc, #44]	; (8000b74 <init_gpio+0x90>)
 8000b48:	f001 feae 	bl	80028a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <init_gpio+0x90>)
 8000b64:	f001 fd36 	bl	80025d4 <HAL_GPIO_Init>
}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000400 	.word	0x48000400

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>

08000b82 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
	application();
 8000b86:	f000 f969 	bl	8000e5c <application>
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <HAL_ADC_MspInit+0x74>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d124      	bne.n	8000c44 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_ADC_MspInit+0x78>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_ADC_MspInit+0x78>)
 8000c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_ADC_MspInit+0x78>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_ADC_MspInit+0x78>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_ADC_MspInit+0x78>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_ADC_MspInit+0x78>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c2e:	230b      	movs	r3, #11
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f001 fcc8 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	50040000 	.word	0x50040000
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_TIM_Base_MspInit+0x44>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d113      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c70:	6613      	str	r3, [r2, #96]	; 0x60
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2019      	movs	r0, #25
 8000c84:	f001 fc6f 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c88:	2019      	movs	r0, #25
 8000c8a:	f001 fc88 	bl	800259e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <HAL_UART_MspInit+0xa0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d13a      	bne.n	8000d38 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_UART_MspInit+0xa4>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0xa4>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_UART_MspInit+0xa4>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0xa4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xa4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xa4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f001 fc60 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d26:	2303      	movs	r3, #3
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f001 fc4e 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f8fe 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000da2:	f002 ffd5 	bl	8003d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000008c 	.word	0x2000008c

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <SystemInit+0x5c>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <SystemInit+0x5c>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <SystemInit+0x60>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <SystemInit+0x60>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <SystemInit+0x60>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <SystemInit+0x60>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <SystemInit+0x60>)
 8000ddc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000de0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <SystemInit+0x60>)
 8000de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x60>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <SystemInit+0x60>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SystemInit+0x60>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	40021000 	.word	0x40021000

08000e14 <config_timer>:
 *      Author: mark
 */
#include "timer_adc_voltage_app.h"

void config_timer(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af02      	add	r7, sp, #8
	init_timer1(1000, TIM_COUNTERMODE_UP, 32000, TIM_CLOCKDIVISION_DIV1,
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2e:	f7ff fdcb 	bl	80009c8 <init_timer1>
		0, TIM_AUTORELOAD_PRELOAD_ENABLE);
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <setup_mcu>:

void setup_mcu(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick.*/
	init_hal();
 8000e3c:	f7ff fb42 	bl	80004c4 <init_hal>

	/* Configure the system clock */
	config_system_clock();
 8000e40:	f7ff fcca 	bl	80007d8 <config_system_clock>

	/* Initialize all configured peripherals */
	init_gpio();
 8000e44:	f7ff fe4e 	bl	8000ae4 <init_gpio>
	init_uart(115200);
 8000e48:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000e4c:	f7ff fe16 	bl	8000a7c <init_uart>
	init_adc1();
 8000e50:	f7ff fd56 	bl	8000900 <init_adc1>
	config_timer();
 8000e54:	f7ff ffde 	bl	8000e14 <config_timer>

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <application>:

void application(void)
{
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
	setup_mcu();
 8000e62:	f7ff ffe9 	bl	8000e38 <setup_mcu>

	char credentials[] = "Assignment 2 - <Mark> <Bilginer>\r\n";
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <application+0x38>)
 8000e68:	1d3c      	adds	r4, r7, #4
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	8022      	strh	r2, [r4, #0]
 8000e7a:	3402      	adds	r4, #2
 8000e7c:	0c1b      	lsrs	r3, r3, #16
 8000e7e:	7023      	strb	r3, [r4, #0]
	uart_print(credentials);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb7e 	bl	8000584 <uart_print>

	tim_base_start_interrupt();
 8000e88:	f7ff fb22 	bl	80004d0 <tim_base_start_interrupt>
}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bdb0      	pop	{r4, r5, r7, pc}
 8000e94:	08004d98 	.word	0x08004d98

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f7ff ff88 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ea0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
	ldr	r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ebc:	f842 3b04 	str.w	r3, [r2], #4

08000ec0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ec2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f003 ff29 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f7ff fe5a 	bl	8000b82 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ed4:	08004e14 	.word	0x08004e14
	ldr	r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000edc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ee4:	20000160 	.word	0x20000160

08000ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_IRQHandler>

08000eea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f001 fb2b 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f80e 	bl	8000f1c <HAL_InitTick>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	e001      	b.n	8000f10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0c:	f7ff fe40 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_InitTick+0x70>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fb37 	bl	80025ba <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f001 fb01 	bl	8002566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_InitTick+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e001      	b.n	8000f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	2000015c 	.word	0x2000015c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000015c 	.word	0x2000015c

08000fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LL_ADC_SetOffset+0x44>)
 800105e:	4013      	ands	r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	4313      	orrs	r3, r2
 800106c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	03fff000 	.word	0x03fff000

08001084 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3360      	adds	r3, #96	; 0x60
 8001092:	461a      	mov	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3360      	adds	r3, #96	; 0x60
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3330      	adds	r3, #48	; 0x30
 800111c:	461a      	mov	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	4413      	add	r3, r2
 800112a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	211f      	movs	r1, #31
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	0e9b      	lsrs	r3, r3, #26
 8001144:	f003 011f 	and.w	r1, r3, #31
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	431a      	orrs	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3314      	adds	r3, #20
 8001174:	461a      	mov	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	0e5b      	lsrs	r3, r3, #25
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	0d1b      	lsrs	r3, r3, #20
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	2107      	movs	r1, #7
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	401a      	ands	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	0d1b      	lsrs	r3, r3, #20
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0318 	and.w	r3, r3, #24
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011e0:	40d9      	lsrs	r1, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	400b      	ands	r3, r1
 80011e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ea:	431a      	orrs	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	0007ffff 	.word	0x0007ffff

08001204 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6093      	str	r3, [r2, #8]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800123c:	d101      	bne.n	8001242 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800128c:	d101      	bne.n	8001292 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012dc:	f043 0202 	orr.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <LL_ADC_IsEnabled+0x18>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_ADC_IsEnabled+0x1a>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	d101      	bne.n	800132e <LL_ADC_IsDisableOngoing+0x18>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <LL_ADC_IsDisableOngoing+0x1a>
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800134c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001350:	f043 0204 	orr.w	r2, r3, #4
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001378:	f043 0210 	orr.w	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b04      	cmp	r3, #4
 800139e:	d101      	bne.n	80013a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c6:	f043 0220 	orr.w	r2, r3, #32
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d101      	bne.n	80013f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e12c      	b.n	8001674 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fbd5 	bl	8000bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fef1 	bl	8001228 <LL_ADC_IsDeepPowerDownEnabled>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fed7 	bl	8001204 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff0c 	bl	8001278 <LL_ADC_IsInternalRegulatorEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d115      	bne.n	8001492 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fef0 	bl	8001250 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001470:	4b82      	ldr	r3, [pc, #520]	; (800167c <HAL_ADC_Init+0x27c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	4a82      	ldr	r2, [pc, #520]	; (8001680 <HAL_ADC_Init+0x280>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	099b      	lsrs	r3, r3, #6
 800147e:	3301      	adds	r3, #1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001484:	e002      	b.n	800148c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3b01      	subs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f9      	bne.n	8001486 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff feee 	bl	8001278 <LL_ADC_IsInternalRegulatorEnabled>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	f043 0210 	orr.w	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff62 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 80014c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80c5 	bne.w	8001662 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 80c1 	bne.w	8001662 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014e8:	f043 0202 	orr.w	r2, r3, #2
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fefb 	bl	80012f0 <LL_ADC_IsEnabled>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10b      	bne.n	8001518 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001500:	4860      	ldr	r0, [pc, #384]	; (8001684 <HAL_ADC_Init+0x284>)
 8001502:	f7ff fef5 	bl	80012f0 <LL_ADC_IsEnabled>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4619      	mov	r1, r3
 8001512:	485d      	ldr	r0, [pc, #372]	; (8001688 <HAL_ADC_Init+0x288>)
 8001514:	f7ff fd5e 	bl	8000fd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7e5b      	ldrb	r3, [r3, #25]
 800151c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001522:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001528:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800152e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001536:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d106      	bne.n	8001554 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	3b01      	subs	r3, #1
 800154c:	045b      	lsls	r3, r3, #17
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d009      	beq.n	8001570 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	4b45      	ldr	r3, [pc, #276]	; (800168c <HAL_ADC_Init+0x28c>)
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	430b      	orrs	r3, r1
 8001582:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff feff 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 800158e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff20 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 800159a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d13d      	bne.n	800161e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d13a      	bne.n	800161e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c4:	f023 0302 	bic.w	r3, r3, #2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	69b9      	ldr	r1, [r7, #24]
 80015ce:	430b      	orrs	r3, r1
 80015d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d118      	bne.n	800160e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015f2:	4311      	orrs	r1, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015f8:	4311      	orrs	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015fe:	430a      	orrs	r2, r1
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	e007      	b.n	800161e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10c      	bne.n	8001640 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f023 010f 	bic.w	r1, r3, #15
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
 800163e:	e007      	b.n	8001650 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 020f 	bic.w	r2, r2, #15
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f023 0303 	bic.w	r3, r3, #3
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
 8001660:	e007      	b.n	8001672 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001672:	7ffb      	ldrb	r3, [r7, #31]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	053e2d63 	.word	0x053e2d63
 8001684:	50040000 	.word	0x50040000
 8001688:	50040300 	.word	0x50040300
 800168c:	fff0c007 	.word	0xfff0c007

08001690 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fe75 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d14f      	bne.n	8001748 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Start+0x26>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e04b      	b.n	800174e <HAL_ADC_Start+0xbe>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fdb4 	bl	800222c <ADC_Enable>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d137      	bne.n	800173e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ee:	d106      	bne.n	80016fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f023 0206 	bic.w	r2, r3, #6
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58
 80016fc:	e002      	b.n	8001704 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	221c      	movs	r2, #28
 800170a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800172a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fe00 	bl	800133c <LL_ADC_REG_StartConversion>
 800173c:	e006      	b.n	800174c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001746:	e001      	b.n	800174c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001748:	2302      	movs	r3, #2
 800174a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_Stop+0x16>
 8001768:	2302      	movs	r3, #2
 800176a:	e023      	b.n	80017b4 <HAL_ADC_Stop+0x5e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001774:	2103      	movs	r1, #3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fc9c 	bl	80020b4 <ADC_ConversionStop>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d111      	bne.n	80017aa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fdb2 	bl	80022f0 <ADC_Disable>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d102      	bne.n	80017d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017ce:	2308      	movs	r3, #8
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e010      	b.n	80017f6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80017f2:	2304      	movs	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017f6:	f7ff fbe1 	bl	8000fbc <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017fc:	e021      	b.n	8001842 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001804:	d01d      	beq.n	8001842 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001806:	f7ff fbd9 	bl	8000fbc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <HAL_ADC_PollForConversion+0x60>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d112      	bne.n	8001842 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10b      	bne.n	8001842 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	f043 0204 	orr.w	r2, r3, #4
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e047      	b.n	80018d2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0d6      	beq.n	80017fe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc40 	bl	80010e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01c      	beq.n	80018a6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7e5b      	ldrb	r3, [r3, #25]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d118      	bne.n	80018a6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b08      	cmp	r3, #8
 8001880:	d111      	bne.n	80018a6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d104      	bne.n	80018be <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2208      	movs	r2, #8
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e008      	b.n	80018d0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	220c      	movs	r2, #12
 80018ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0b6      	sub	sp, #216	; 0xd8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x22>
 8001912:	2302      	movs	r3, #2
 8001914:	e3b9      	b.n	800208a <HAL_ADC_ConfigChannel+0x796>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fd32 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 839e 	bne.w	800206c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d824      	bhi.n	8001982 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	3b02      	subs	r3, #2
 800193e:	2b03      	cmp	r3, #3
 8001940:	d81b      	bhi.n	800197a <HAL_ADC_ConfigChannel+0x86>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_ADC_ConfigChannel+0x54>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	08001959 	.word	0x08001959
 800194c:	08001961 	.word	0x08001961
 8001950:	08001969 	.word	0x08001969
 8001954:	08001971 	.word	0x08001971
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	220c      	movs	r2, #12
 800195c:	605a      	str	r2, [r3, #4]
          break;
 800195e:	e011      	b.n	8001984 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2212      	movs	r2, #18
 8001964:	605a      	str	r2, [r3, #4]
          break;
 8001966:	e00d      	b.n	8001984 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2218      	movs	r2, #24
 800196c:	605a      	str	r2, [r3, #4]
          break;
 800196e:	e009      	b.n	8001984 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001976:	605a      	str	r2, [r3, #4]
          break;
 8001978:	e004      	b.n	8001984 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2206      	movs	r2, #6
 800197e:	605a      	str	r2, [r3, #4]
          break;
 8001980:	e000      	b.n	8001984 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001982:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	f7ff fbbb 	bl	800110c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fcf6 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 80019a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fd16 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 80019ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 81a6 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 81a1 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7ff fbc6 	bl	8001164 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d00a      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6919      	ldr	r1, [r3, #16]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a0a:	f7ff fb17 	bl	800103c <LL_ADC_SetOffset>
 8001a0e:	e17b      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fb34 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x148>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb29 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	f003 021f 	and.w	r2, r3, #31
 8001a3a:	e01e      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x186>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fb1e 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	e004      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x19e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	e018      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e004      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff faed 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fad1 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10a      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x20e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fac6 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	0e9b      	lsrs	r3, r3, #26
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	e01e      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x24c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fabb 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b30:	2320      	movs	r3, #32
 8001b32:	e004      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x264>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0e9b      	lsrs	r3, r3, #26
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	e018      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x296>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e004      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fa8a 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fa6e 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x2d4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa63 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	f003 021f 	and.w	r2, r3, #31
 8001bc6:	e01e      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x312>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa58 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e004      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x32a>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	e016      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x358>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2102      	movs	r1, #2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fa29 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2103      	movs	r1, #3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa0d 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x396>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2103      	movs	r1, #3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa02 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	e017      	b.n	8001cba <HAL_ADC_ConfigChannel+0x3c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2103      	movs	r1, #3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f9f7 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d105      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x3de>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	e011      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x402>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001cea:	2320      	movs	r3, #32
 8001cec:	e003      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d106      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2103      	movs	r1, #3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9d4 	bl	80010b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff faef 	bl	80012f0 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 813f 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7ff fa48 	bl	80011bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a8e      	ldr	r2, [pc, #568]	; (8001f6c <HAL_ADC_ConfigChannel+0x678>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 8130 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x46c>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e019      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x4a0>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	bf94      	ite	ls
 8001d8e:	2301      	movls	r3, #1
 8001d90:	2300      	movhi	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d079      	beq.n	8001e8c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x4c0>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	3301      	adds	r3, #1
 8001dac:	069b      	lsls	r3, r3, #26
 8001dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db2:	e015      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x4ec>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	e003      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	069b      	lsls	r3, r3, #26
 8001ddc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x50c>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	e017      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x53c>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e003      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	ea42 0103 	orr.w	r1, r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x562>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	051b      	lsls	r3, r3, #20
 8001e54:	e018      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x594>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e003      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	e080      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x5b4>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	069b      	lsls	r3, r3, #26
 8001ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	e015      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x5e0>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e003      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x600>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	e017      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x630>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	61fb      	str	r3, [r7, #28]
  return result;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e003      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x65c>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	051b      	lsls	r3, r3, #20
 8001f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	e01d      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x698>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	613b      	str	r3, [r7, #16]
  return result;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e005      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x684>
 8001f6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	051b      	lsls	r3, r3, #20
 8001f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6892      	ldr	r2, [r2, #8]
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7ff f8e6 	bl	8001164 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_ADC_ConfigChannel+0x7a0>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d06c      	beq.n	800207e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa4:	483c      	ldr	r0, [pc, #240]	; (8002098 <HAL_ADC_ConfigChannel+0x7a4>)
 8001fa6:	f7ff f83b 	bl	8001020 <LL_ADC_GetCommonPathInternalCh>
 8001faa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	; (800209c <HAL_ADC_ConfigChannel+0x7a8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d127      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d121      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a35      	ldr	r2, [pc, #212]	; (80020a0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d157      	bne.n	800207e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	482f      	ldr	r0, [pc, #188]	; (8002098 <HAL_ADC_ConfigChannel+0x7a4>)
 8001fda:	f7ff f80e 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	099b      	lsrs	r3, r3, #6
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002006:	e03a      	b.n	800207e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <HAL_ADC_ConfigChannel+0x7b8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d113      	bne.n	800203a <HAL_ADC_ConfigChannel+0x746>
 8002012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d12a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002030:	4619      	mov	r1, r3
 8002032:	4819      	ldr	r0, [pc, #100]	; (8002098 <HAL_ADC_ConfigChannel+0x7a4>)
 8002034:	f7fe ffe1 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002038:	e021      	b.n	800207e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d11c      	bne.n	800207e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d116      	bne.n	800207e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d111      	bne.n	800207e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800205a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800205e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <HAL_ADC_ConfigChannel+0x7a4>)
 8002066:	f7fe ffc8 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
 800206a:	e008      	b.n	800207e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002086:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800208a:	4618      	mov	r0, r3
 800208c:	37d8      	adds	r7, #216	; 0xd8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	80080000 	.word	0x80080000
 8002098:	50040300 	.word	0x50040300
 800209c:	c7520000 	.word	0xc7520000
 80020a0:	50040000 	.word	0x50040000
 80020a4:	20000000 	.word	0x20000000
 80020a8:	053e2d63 	.word	0x053e2d63
 80020ac:	cb840000 	.word	0xcb840000
 80020b0:	80000001 	.word	0x80000001

080020b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f95e 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 80020d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f97f 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 80020dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d103      	bne.n	80020ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8098 	beq.w	800221c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02a      	beq.n	8002150 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7e5b      	ldrb	r3, [r3, #25]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d126      	bne.n	8002150 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7e1b      	ldrb	r3, [r3, #24]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d122      	bne.n	8002150 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800210e:	e014      	b.n	800213a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4a45      	ldr	r2, [pc, #276]	; (8002228 <ADC_ConversionStop+0x174>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d90d      	bls.n	8002134 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e074      	b.n	800221e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3301      	adds	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d1e3      	bne.n	8002110 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d014      	beq.n	8002180 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f916 	bl	800138c <LL_ADC_REG_IsConversionOngoing>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f8d3 	bl	8001316 <LL_ADC_IsDisableOngoing>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f8f2 	bl	8001364 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d014      	beq.n	80021b0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f925 	bl	80013da <LL_ADC_INJ_IsConversionOngoing>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f8bb 	bl	8001316 <LL_ADC_IsDisableOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f901 	bl	80013b2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d005      	beq.n	80021c2 <ADC_ConversionStop+0x10e>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d105      	bne.n	80021c8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021bc:	230c      	movs	r3, #12
 80021be:	617b      	str	r3, [r7, #20]
        break;
 80021c0:	e005      	b.n	80021ce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021c2:	2308      	movs	r3, #8
 80021c4:	617b      	str	r3, [r7, #20]
        break;
 80021c6:	e002      	b.n	80021ce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021c8:	2304      	movs	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]
        break;
 80021cc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fef5 	bl	8000fbc <HAL_GetTick>
 80021d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021d4:	e01b      	b.n	800220e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021d6:	f7fe fef1 	bl	8000fbc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d914      	bls.n	800220e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e007      	b.n	800221e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1dc      	bne.n	80021d6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	a33fffff 	.word	0xa33fffff

0800222c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f859 	bl	80012f0 <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d14d      	bne.n	80022e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <ADC_Enable+0xc0>)
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e039      	b.n	80022e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f814 	bl	80012a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002278:	f7fe fea0 	bl	8000fbc <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227e:	e028      	b.n	80022d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f833 	bl	80012f0 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f803 	bl	80012a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800229a:	f7fe fe8f 	bl	8000fbc <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d914      	bls.n	80022d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d00d      	beq.n	80022d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d1cf      	bne.n	8002280 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	8000003f 	.word	0x8000003f

080022f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f80a 	bl	8001316 <LL_ADC_IsDisableOngoing>
 8002302:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fff1 	bl	80012f0 <LL_ADC_IsEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d047      	beq.n	80023a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d144      	bne.n	80023a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030d 	and.w	r3, r3, #13
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10c      	bne.n	8002342 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe ffcb 	bl	80012c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2203      	movs	r2, #3
 8002338:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800233a:	f7fe fe3f 	bl	8000fbc <HAL_GetTick>
 800233e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002340:	e029      	b.n	8002396 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e023      	b.n	80023a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800235e:	f7fe fe2d 	bl	8000fbc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d914      	bls.n	8002396 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e007      	b.n	80023a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1dc      	bne.n	800235e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800251c:	d301      	bcc.n	8002522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <SysTick_Config+0x40>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252a:	210f      	movs	r1, #15
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002530:	f7ff ff8e 	bl	8002450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <SysTick_Config+0x40>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <SysTick_Config+0x40>)
 800253c:	2207      	movs	r2, #7
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff29 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002578:	f7ff ff3e 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 800257c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff8e 	bl	80024a4 <NVIC_EncodePriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff5d 	bl	8002450 <__NVIC_SetPriority>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff31 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffa2 	bl	800250c <SysTick_Config>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e148      	b.n	8002876 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 813a 	beq.w	8002870 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d00b      	beq.n	800261c <HAL_GPIO_Init+0x48>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	2b11      	cmp	r3, #17
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d130      	bne.n	800267e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002652:	2201      	movs	r2, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0201 	and.w	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0xea>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b12      	cmp	r3, #18
 80026bc:	d123      	bne.n	8002706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	6939      	ldr	r1, [r7, #16]
 8002702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8094 	beq.w	8002870 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002748:	4b52      	ldr	r3, [pc, #328]	; (8002894 <HAL_GPIO_Init+0x2c0>)
 800274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274c:	4a51      	ldr	r2, [pc, #324]	; (8002894 <HAL_GPIO_Init+0x2c0>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6613      	str	r3, [r2, #96]	; 0x60
 8002754:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x2c0>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002760:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <HAL_GPIO_Init+0x2c4>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800278a:	d00d      	beq.n	80027a8 <HAL_GPIO_Init+0x1d4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a43      	ldr	r2, [pc, #268]	; (800289c <HAL_GPIO_Init+0x2c8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <HAL_GPIO_Init+0x1d0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a42      	ldr	r2, [pc, #264]	; (80028a0 <HAL_GPIO_Init+0x2cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_GPIO_Init+0x1cc>
 800279c:	2302      	movs	r3, #2
 800279e:	e004      	b.n	80027aa <HAL_GPIO_Init+0x1d6>
 80027a0:	2307      	movs	r3, #7
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x1d6>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_Init+0x1d6>
 80027a8:	2300      	movs	r3, #0
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ba:	4937      	ldr	r1, [pc, #220]	; (8002898 <HAL_GPIO_Init+0x2c4>)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ec:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002816:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002840:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800286a:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <HAL_GPIO_Init+0x2d0>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f aeaf 	bne.w	80025e4 <HAL_GPIO_Init+0x10>
  }
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40021000 	.word	0x40021000
 8002898:	40010000 	.word	0x40010000
 800289c:	48000400 	.word	0x48000400
 80028a0:	48000800 	.word	0x48000800
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000

080028f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_PWREx_GetVoltageRange+0x18>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40007000 	.word	0x40007000

08002914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002922:	d130      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d038      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2232      	movs	r2, #50	; 0x32
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002958:	e002      	b.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d102      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f2      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d110      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00f      	b.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d007      	beq.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000
 80029b8:	20000000 	.word	0x20000000
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f000 bc11 	b.w	80031f6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d4:	4ba0      	ldr	r3, [pc, #640]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029de:	4b9e      	ldr	r3, [pc, #632]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80e4 	beq.w	8002bbe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4c>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	f040 808b 	bne.w	8002b1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	f040 8087 	bne.w	8002b1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0c:	4b92      	ldr	r3, [pc, #584]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x64>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e3e8      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	4b8b      	ldr	r3, [pc, #556]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_RCC_OscConfig+0x7e>
 8002a34:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3c:	e005      	b.n	8002a4a <HAL_RCC_OscConfig+0x8a>
 8002a3e:	4b86      	ldr	r3, [pc, #536]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d223      	bcs.n	8002a96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fd7a 	bl	800354c <RCC_SetFlashLatencyFromMSIRange>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e3c9      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a62:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7c      	ldr	r2, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4977      	ldr	r1, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	4b75      	ldr	r3, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	4972      	ldr	r1, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e025      	b.n	8002ae2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6f      	ldr	r2, [pc, #444]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	496a      	ldr	r1, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	4965      	ldr	r1, [pc, #404]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fd3a 	bl	800354c <RCC_SetFlashLatencyFromMSIRange>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e389      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ae2:	f000 fc6f 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	495a      	ldr	r1, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x29c>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_RCC_OscConfig+0x2a0>)
 8002b00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b02:	4b58      	ldr	r3, [pc, #352]	; (8002c64 <HAL_RCC_OscConfig+0x2a4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fa08 	bl	8000f1c <HAL_InitTick>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d052      	beq.n	8002bbc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	e36d      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d032      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b22:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fa45 	bl	8000fbc <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b36:	f7fe fa41 	bl	8000fbc <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e356      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a3f      	ldr	r2, [pc, #252]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b5a:	f043 0308 	orr.w	r3, r3, #8
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	493a      	ldr	r1, [pc, #232]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	4935      	ldr	r1, [pc, #212]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
 8002b86:	e01a      	b.n	8002bbe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a32      	ldr	r2, [pc, #200]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fa12 	bl	8000fbc <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fa0e 	bl	8000fbc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e323      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bae:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x1dc>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d073      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x21c>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d063      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d15f      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e300      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x24c>
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0x288>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x270>
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0x288>
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_RCC_OscConfig+0x298>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe f9b4 	bl	8000fbc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	e010      	b.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08004dbc 	.word	0x08004dbc
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe f9a8 	bl	8000fbc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e2bd      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	4baf      	ldr	r3, [pc, #700]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2a8>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe f998 	bl	8000fbc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe f994 	bl	8000fbc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2a9      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	4ba5      	ldr	r3, [pc, #660]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d0>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d060      	beq.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x310>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d116      	bne.n	8002cfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x328>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e286      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b93      	ldr	r3, [pc, #588]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4990      	ldr	r1, [pc, #576]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfc:	e040      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d023      	beq.n	8002d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a8b      	ldr	r2, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe f953 	bl	8000fbc <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe f94f 	bl	8000fbc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e264      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	497c      	ldr	r1, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e018      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a79      	ldr	r2, [pc, #484]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f92f 	bl	8000fbc <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7fe f92b 	bl	8000fbc <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e240      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d74:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	4a67      	ldr	r2, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f90a 	bl	8000fbc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe f906 	bl	8000fbc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e21b      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbe:	4b5e      	ldr	r3, [pc, #376]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <HAL_RCC_OscConfig+0x3ec>
 8002dcc:	e01b      	b.n	8002e06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe f8ed 	bl	8000fbc <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe f8e9 	bl	8000fbc <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1fe      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ef      	bne.n	8002de6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a6 	beq.w	8002f60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a43      	ldr	r2, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d118      	bne.n	8002e7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e58:	f7fe f8b0 	bl	8000fbc <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7fe f8ac 	bl	8000fbc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1c1      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <HAL_RCC_OscConfig+0x57c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d108      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4d8>
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e96:	e024      	b.n	8002ee2 <HAL_RCC_OscConfig+0x522>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d110      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x502>
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x522>
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe f867 	bl	8000fbc <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe f863 	bl	8000fbc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e176      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ed      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x532>
 8002f16:	e01a      	b.n	8002f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe f850 	bl	8000fbc <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe f84c 	bl	8000fbc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d906      	bls.n	8002f40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e15f      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	4baa      	ldr	r3, [pc, #680]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e8      	bne.n	8002f20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4aa4      	ldr	r2, [pc, #656]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d03c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01c      	beq.n	8002fae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f74:	4b9d      	ldr	r3, [pc, #628]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7a:	4a9c      	ldr	r2, [pc, #624]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe f81a 	bl	8000fbc <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f8c:	f7fe f816 	bl	8000fbc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e12b      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9e:	4b93      	ldr	r3, [pc, #588]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ef      	beq.n	8002f8c <HAL_RCC_OscConfig+0x5cc>
 8002fac:	e01b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fae:	4b8f      	ldr	r3, [pc, #572]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb4:	4a8d      	ldr	r2, [pc, #564]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fd fffd 	bl	8000fbc <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc6:	f7fd fff9 	bl	8000fbc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e10e      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd8:	4b84      	ldr	r3, [pc, #528]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ef      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8102 	beq.w	80031f4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	f040 80c5 	bne.w	8003184 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0203 	and.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	429a      	cmp	r2, r3
 800300c:	d12c      	bne.n	8003068 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	3b01      	subs	r3, #1
 800301a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d123      	bne.n	8003068 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d11b      	bne.n	8003068 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d113      	bne.n	8003068 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d109      	bne.n	8003068 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	3b01      	subs	r3, #1
 8003062:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d067      	beq.n	8003138 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d062      	beq.n	8003134 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800306e:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0bb      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003088:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308a:	f7fd ff97 	bl	8000fbc <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fd ff93 	bl	8000fbc <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0a8      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4b4e      	ldr	r3, [pc, #312]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <HAL_RCC_OscConfig+0x830>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ca:	0212      	lsls	r2, r2, #8
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030d2:	0852      	lsrs	r2, r2, #1
 80030d4:	3a01      	subs	r2, #1
 80030d6:	0552      	lsls	r2, r2, #21
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030de:	0852      	lsrs	r2, r2, #1
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0652      	lsls	r2, r2, #25
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ea:	06d2      	lsls	r2, r2, #27
 80030ec:	430a      	orrs	r2, r1
 80030ee:	493f      	ldr	r1, [pc, #252]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030f4:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a39      	ldr	r2, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800310c:	f7fd ff56 	bl	8000fbc <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fd ff52 	bl	8000fbc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e067      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003132:	e05f      	b.n	80031f4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e05e      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003138:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d157      	bne.n	80031f4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a28      	ldr	r2, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003150:	4b26      	ldr	r3, [pc, #152]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800315c:	f7fd ff2e 	bl	8000fbc <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd ff2a 	bl	8000fbc <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e03f      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x7a4>
 8003182:	e037      	b.n	80031f4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d02d      	beq.n	80031e6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003194:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80031a8:	f023 0303 	bic.w	r3, r3, #3
 80031ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80031b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd fefd 	bl	8000fbc <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fd fef9 	bl	8000fbc <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e00e      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCC_OscConfig+0x82c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x806>
 80031e4:	e006      	b.n	80031f4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e005      	b.n	80031f6 <HAL_RCC_OscConfig+0x836>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0c8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b66      	ldr	r3, [pc, #408]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d910      	bls.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4961      	ldr	r1, [pc, #388]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b0      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d04c      	beq.n	80032ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d107      	bne.n	8003268 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003258:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d121      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e09e      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d115      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e092      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003288:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e086      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e07e      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032a8:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 0203 	bic.w	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	493f      	ldr	r1, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fd fe7f 	bl	8000fbc <HAL_GetTick>
 80032be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c2:	f7fd fe7b 	bl	8000fbc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e066      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 020c 	and.w	r2, r3, #12
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1eb      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	492c      	ldr	r1, [pc, #176]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d210      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 0207 	bic.w	r2, r3, #7
 800331e:	4924      	ldr	r1, [pc, #144]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e036      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4918      	ldr	r1, [pc, #96]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4910      	ldr	r1, [pc, #64]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003376:	f000 f825 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_RCC_ClockConfig+0x1b4>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490c      	ldr	r1, [pc, #48]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fdbe 	bl	8000f1c <HAL_InitTick>
 80033a0:	4603      	mov	r3, r0
 80033a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80033a4:	7afb      	ldrb	r3, [r7, #11]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08004dbc 	.word	0x08004dbc
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d11e      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e005      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003414:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003434:	e00a      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d102      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800343c:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e004      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d101      	bne.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800344a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d134      	bne.n	80034bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d003      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0xa6>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d003      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0xac>
 8003468:	e005      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800346c:	617b      	str	r3, [r7, #20]
      break;
 800346e:	e005      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003472:	617b      	str	r3, [r7, #20]
      break;
 8003474:	e002      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	617b      	str	r3, [r7, #20]
      break;
 800347a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	fb02 f203 	mul.w	r2, r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCC_GetSysClockFreq+0x108>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	0e5b      	lsrs	r3, r3, #25
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	3301      	adds	r3, #1
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034bc:	69bb      	ldr	r3, [r7, #24]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	08004dd4 	.word	0x08004dd4
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	007a1200 	.word	0x007a1200

080034dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4904      	ldr	r1, [pc, #16]	; (800351c <HAL_RCC_GetPCLK1Freq+0x28>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08004dcc 	.word	0x08004dcc

08003520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003524:	f7ff ffda 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0adb      	lsrs	r3, r3, #11
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4904      	ldr	r1, [pc, #16]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	08004dcc 	.word	0x08004dcc

0800354c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003558:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f9c8 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
 800356a:	e014      	b.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	4a24      	ldr	r2, [pc, #144]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6593      	str	r3, [r2, #88]	; 0x58
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003584:	f7ff f9b8 	bl	80028f8 <HAL_PWREx_GetVoltageRange>
 8003588:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359c:	d10b      	bne.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d919      	bls.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2ba0      	cmp	r3, #160	; 0xa0
 80035a8:	d902      	bls.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035aa:	2302      	movs	r3, #2
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	e013      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b0:	2301      	movs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e010      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d902      	bls.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035bc:	2303      	movs	r3, #3
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e00a      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d102      	bne.n	80035ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035c8:	2302      	movs	r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e004      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b70      	cmp	r3, #112	; 0x70
 80035d2:	d101      	bne.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d4:	2301      	movs	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 0207 	bic.w	r2, r3, #7
 80035e0:	4909      	ldr	r1, [pc, #36]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	40022000 	.word	0x40022000

0800360c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003614:	2300      	movs	r3, #0
 8003616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003618:	2300      	movs	r3, #0
 800361a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	2b00      	cmp	r3, #0
 8003626:	d031      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003630:	d01a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003632:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003636:	d814      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800363c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003640:	d10f      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003642:	4bac      	ldr	r3, [pc, #688]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4aab      	ldr	r2, [pc, #684]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364e:	e00c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f9dc 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	74fb      	strb	r3, [r7, #19]
      break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003670:	4ba0      	ldr	r3, [pc, #640]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	499d      	ldr	r1, [pc, #628]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8099 	beq.w	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800369e:	4b95      	ldr	r3, [pc, #596]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b4:	4b8f      	ldr	r3, [pc, #572]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	4a8e      	ldr	r2, [pc, #568]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	6593      	str	r3, [r2, #88]	; 0x58
 80036c0:	4b8c      	ldr	r3, [pc, #560]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036cc:	2301      	movs	r3, #1
 80036ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d0:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a88      	ldr	r2, [pc, #544]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036dc:	f7fd fc6e 	bl	8000fbc <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036e2:	e009      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fc6a 	bl	8000fbc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	74fb      	strb	r3, [r7, #19]
        break;
 80036f6:	e005      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036f8:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d155      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800370a:	4b7a      	ldr	r3, [pc, #488]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003714:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	429a      	cmp	r2, r3
 8003724:	d019      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003726:	4b73      	ldr	r3, [pc, #460]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003730:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	4b70      	ldr	r3, [pc, #448]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	4a6e      	ldr	r2, [pc, #440]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003742:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	4a6a      	ldr	r2, [pc, #424]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800374a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003752:	4a68      	ldr	r2, [pc, #416]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd fc2a 	bl	8000fbc <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	e00b      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fd fc26 	bl	8000fbc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d902      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	74fb      	strb	r3, [r7, #19]
            break;
 8003782:	e006      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003784:	4b5b      	ldr	r3, [pc, #364]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ec      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003798:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	4953      	ldr	r1, [pc, #332]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ae:	e004      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	74bb      	strb	r3, [r7, #18]
 80037b4:	e001      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ba:	7c7b      	ldrb	r3, [r7, #17]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4943      	ldr	r1, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f023 020c 	bic.w	r2, r3, #12
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	493a      	ldr	r1, [pc, #232]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	4932      	ldr	r1, [pc, #200]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	4929      	ldr	r1, [pc, #164]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	4921      	ldr	r1, [pc, #132]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003882:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4918      	ldr	r1, [pc, #96]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4910      	ldr	r1, [pc, #64]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02c      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4907      	ldr	r1, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e4:	d10a      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e6:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a02      	ldr	r2, [pc, #8]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f0:	60d3      	str	r3, [r2, #12]
 80038f2:	e015      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003904:	d10c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f881 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d028      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	492d      	ldr	r1, [pc, #180]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394a:	d106      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394c:	4b28      	ldr	r3, [pc, #160]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003956:	60d3      	str	r3, [r2, #12]
 8003958:	e011      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003962:	d10c      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	2101      	movs	r1, #1
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f852 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01c      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	4915      	ldr	r1, [pc, #84]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2102      	movs	r1, #2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f82f 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ba:	7cfb      	ldrb	r3, [r7, #19]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039d0:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	4904      	ldr	r1, [pc, #16]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000

08003a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a22:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2e:	4b71      	ldr	r3, [pc, #452]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0203 	and.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10d      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
       ||
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a46:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
       ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d047      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e044      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d018      	beq.n	8003a9a <RCCEx_PLLSAI1_Config+0x86>
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d825      	bhi.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d002      	beq.n	8003a76 <RCCEx_PLLSAI1_Config+0x62>
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d009      	beq.n	8003a88 <RCCEx_PLLSAI1_Config+0x74>
 8003a74:	e020      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a76:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11d      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a86:	e01a      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a88:	4b5a      	ldr	r3, [pc, #360]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d116      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e013      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9a:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab6:	e006      	b.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e004      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ace:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	4943      	ldr	r1, [pc, #268]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d17c      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003af0:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a3f      	ldr	r2, [pc, #252]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fd fa5e 	bl	8000fbc <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b02:	e009      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b04:	f7fd fa5a 	bl	8000fbc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d902      	bls.n	8003b18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	73fb      	strb	r3, [r7, #15]
        break;
 8003b16:	e005      	b.n	8003b24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ef      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d15f      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b30:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6892      	ldr	r2, [r2, #8]
 8003b40:	0211      	lsls	r1, r2, #8
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	06d2      	lsls	r2, r2, #27
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	492a      	ldr	r1, [pc, #168]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
 8003b50:	e027      	b.n	8003ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d112      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b58:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6912      	ldr	r2, [r2, #16]
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0552      	lsls	r2, r2, #21
 8003b74:	430a      	orrs	r2, r1
 8003b76:	491f      	ldr	r1, [pc, #124]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
 8003b7c:	e011      	b.n	8003ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6892      	ldr	r2, [r2, #8]
 8003b8e:	0211      	lsls	r1, r2, #8
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6952      	ldr	r2, [r2, #20]
 8003b94:	0852      	lsrs	r2, r2, #1
 8003b96:	3a01      	subs	r2, #1
 8003b98:	0652      	lsls	r2, r2, #25
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	4915      	ldr	r1, [pc, #84]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd fa05 	bl	8000fbc <HAL_GetTick>
 8003bb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb4:	e009      	b.n	8003bca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb6:	f7fd fa01 	bl	8000fbc <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d902      	bls.n	8003bca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc8:	e005      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ef      	beq.n	8003bb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4903      	ldr	r1, [pc, #12]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e049      	b.n	8003c9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f818 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fa98 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e03b      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d115      	bne.n	8003d22 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_TIM_Base_Start_IT+0xa4>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d015      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d011      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	e008      	b.n	8003d34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	00010007 	.word	0x00010007

08003d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d122      	bne.n	8003dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11b      	bne.n	8003dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0202 	mvn.w	r2, #2
 8003d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f9cb 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003d98:	e005      	b.n	8003da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f9bd 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f9ce 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d122      	bne.n	8003e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d11b      	bne.n	8003e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0204 	mvn.w	r2, #4
 8003dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9a1 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003dec:	e005      	b.n	8003dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f993 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f9a4 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d122      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d11b      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0208 	mvn.w	r2, #8
 8003e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f977 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f969 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f97a 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d122      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0210 	mvn.w	r2, #16
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f94d 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f93f 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f950 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0201 	mvn.w	r2, #1
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc fc2c 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d10e      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d107      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 faa4 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0e:	d10e      	bne.n	8003f2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b80      	cmp	r3, #128	; 0x80
 8003f1c:	d107      	bne.n	8003f2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa97 	bl	800445c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d10e      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b40      	cmp	r3, #64	; 0x40
 8003f48:	d107      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8fe 	bl	8004156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d10e      	bne.n	8003f86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d107      	bne.n	8003f86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f06f 0220 	mvn.w	r2, #32
 8003f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fa57 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_ConfigClockSource+0x18>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0b5      	b.n	8004112 <HAL_TIM_ConfigClockSource+0x184>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fc8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d03e      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xd4>
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	f200 8087 	bhi.w	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	f000 8085 	beq.w	80040fe <HAL_TIM_ConfigClockSource+0x170>
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d87f      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 8003ffa:	2b70      	cmp	r3, #112	; 0x70
 8003ffc:	d01a      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xa6>
 8003ffe:	2b70      	cmp	r3, #112	; 0x70
 8004000:	d87b      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 8004002:	2b60      	cmp	r3, #96	; 0x60
 8004004:	d050      	beq.n	80040a8 <HAL_TIM_ConfigClockSource+0x11a>
 8004006:	2b60      	cmp	r3, #96	; 0x60
 8004008:	d877      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 800400a:	2b50      	cmp	r3, #80	; 0x50
 800400c:	d03c      	beq.n	8004088 <HAL_TIM_ConfigClockSource+0xfa>
 800400e:	2b50      	cmp	r3, #80	; 0x50
 8004010:	d873      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d058      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0x13a>
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d86f      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 800401a:	2b30      	cmp	r3, #48	; 0x30
 800401c:	d064      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0x15a>
 800401e:	2b30      	cmp	r3, #48	; 0x30
 8004020:	d86b      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d060      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0x15a>
 8004026:	2b20      	cmp	r3, #32
 8004028:	d867      	bhi.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d05c      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0x15a>
 800402e:	2b10      	cmp	r3, #16
 8004030:	d05a      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004032:	e062      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f000 f970 	bl	8004328 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004056:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]
      break;
 8004060:	e04e      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6899      	ldr	r1, [r3, #8]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f000 f959 	bl	8004328 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004084:	609a      	str	r2, [r3, #8]
      break;
 8004086:	e03b      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	461a      	mov	r2, r3
 8004096:	f000 f8cd 	bl	8004234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2150      	movs	r1, #80	; 0x50
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f926 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 80040a6:	e02b      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	461a      	mov	r2, r3
 80040b6:	f000 f8ec 	bl	8004292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2160      	movs	r1, #96	; 0x60
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f916 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 80040c6:	e01b      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f000 f8ad 	bl	8004234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2140      	movs	r1, #64	; 0x40
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f906 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 80040e6:	e00b      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 f8fd 	bl	80042f2 <TIM_ITRx_SetConfig>
        break;
 80040f8:	e002      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <TIM_Base_SetConfig+0xbc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x20>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a21      	ldr	r2, [pc, #132]	; (8004228 <TIM_Base_SetConfig+0xbc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x52>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x52>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	; (800422c <TIM_Base_SetConfig+0xc0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x52>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <TIM_Base_SetConfig+0xc4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <TIM_Base_SetConfig+0xbc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_Base_SetConfig+0xa0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0b      	ldr	r2, [pc, #44]	; (800422c <TIM_Base_SetConfig+0xc0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0xa0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <TIM_Base_SetConfig+0xc4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400

08004234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 030a 	bic.w	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004292:	b480      	push	{r7}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0210 	bic.w	r2, r3, #16
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	f043 0307 	orr.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	021a      	lsls	r2, r3, #8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	431a      	orrs	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e04f      	b.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a14      	ldr	r2, [pc, #80]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d004      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a10      	ldr	r2, [pc, #64]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	4313      	orrs	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40014000 	.word	0x40014000

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e040      	b.n	8004504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fc04 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8c0 	bl	8004634 <UART_SetConfig>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fac0 	bl	8004a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb47 	bl	8004b90 <UART_CheckIdleState>
 8004502:	4603      	mov	r3, r0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004520:	2b20      	cmp	r3, #32
 8004522:	f040 8082 	bne.w	800462a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_UART_Transmit+0x26>
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07a      	b.n	800462c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_UART_Transmit+0x38>
 8004540:	2302      	movs	r3, #2
 8004542:	e073      	b.n	800462c <HAL_UART_Transmit+0x120>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2221      	movs	r2, #33	; 0x21
 8004558:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800455a:	f7fc fd2f 	bl	8000fbc <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d108      	bne.n	800458c <HAL_UART_Transmit+0x80>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e003      	b.n	8004594 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800459c:	e02d      	b.n	80045fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fb3a 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e039      	b.n	800462c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ca:	b292      	uxth	r2, r2
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	3302      	adds	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e008      	b.n	80045e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b292      	uxth	r2, r2
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1cb      	bne.n	800459e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb06 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e005      	b.n	800462c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	4313      	orrs	r3, r2
 8004656:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4baf      	ldr	r3, [pc, #700]	; (800491c <UART_SetConfig+0x2e8>)
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	69f9      	ldr	r1, [r7, #28]
 8004668:	430b      	orrs	r3, r1
 800466a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4aa4      	ldr	r2, [pc, #656]	; (8004920 <UART_SetConfig+0x2ec>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	4313      	orrs	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a9b      	ldr	r2, [pc, #620]	; (8004924 <UART_SetConfig+0x2f0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d121      	bne.n	80046fe <UART_SetConfig+0xca>
 80046ba:	4b9b      	ldr	r3, [pc, #620]	; (8004928 <UART_SetConfig+0x2f4>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d817      	bhi.n	80046f8 <UART_SetConfig+0xc4>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x9c>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046ed 	.word	0x080046ed
 80046d8:	080046e7 	.word	0x080046e7
 80046dc:	080046f3 	.word	0x080046f3
 80046e0:	2301      	movs	r3, #1
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e070      	b.n	80047c8 <UART_SetConfig+0x194>
 80046e6:	2302      	movs	r3, #2
 80046e8:	76fb      	strb	r3, [r7, #27]
 80046ea:	e06d      	b.n	80047c8 <UART_SetConfig+0x194>
 80046ec:	2304      	movs	r3, #4
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e06a      	b.n	80047c8 <UART_SetConfig+0x194>
 80046f2:	2308      	movs	r3, #8
 80046f4:	76fb      	strb	r3, [r7, #27]
 80046f6:	e067      	b.n	80047c8 <UART_SetConfig+0x194>
 80046f8:	2310      	movs	r3, #16
 80046fa:	76fb      	strb	r3, [r7, #27]
 80046fc:	e064      	b.n	80047c8 <UART_SetConfig+0x194>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a8a      	ldr	r2, [pc, #552]	; (800492c <UART_SetConfig+0x2f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d132      	bne.n	800476e <UART_SetConfig+0x13a>
 8004708:	4b87      	ldr	r3, [pc, #540]	; (8004928 <UART_SetConfig+0x2f4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d828      	bhi.n	8004768 <UART_SetConfig+0x134>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0xe8>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004751 	.word	0x08004751
 8004720:	08004769 	.word	0x08004769
 8004724:	08004769 	.word	0x08004769
 8004728:	08004769 	.word	0x08004769
 800472c:	0800475d 	.word	0x0800475d
 8004730:	08004769 	.word	0x08004769
 8004734:	08004769 	.word	0x08004769
 8004738:	08004769 	.word	0x08004769
 800473c:	08004757 	.word	0x08004757
 8004740:	08004769 	.word	0x08004769
 8004744:	08004769 	.word	0x08004769
 8004748:	08004769 	.word	0x08004769
 800474c:	08004763 	.word	0x08004763
 8004750:	2300      	movs	r3, #0
 8004752:	76fb      	strb	r3, [r7, #27]
 8004754:	e038      	b.n	80047c8 <UART_SetConfig+0x194>
 8004756:	2302      	movs	r3, #2
 8004758:	76fb      	strb	r3, [r7, #27]
 800475a:	e035      	b.n	80047c8 <UART_SetConfig+0x194>
 800475c:	2304      	movs	r3, #4
 800475e:	76fb      	strb	r3, [r7, #27]
 8004760:	e032      	b.n	80047c8 <UART_SetConfig+0x194>
 8004762:	2308      	movs	r3, #8
 8004764:	76fb      	strb	r3, [r7, #27]
 8004766:	e02f      	b.n	80047c8 <UART_SetConfig+0x194>
 8004768:	2310      	movs	r3, #16
 800476a:	76fb      	strb	r3, [r7, #27]
 800476c:	e02c      	b.n	80047c8 <UART_SetConfig+0x194>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a6b      	ldr	r2, [pc, #428]	; (8004920 <UART_SetConfig+0x2ec>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d125      	bne.n	80047c4 <UART_SetConfig+0x190>
 8004778:	4b6b      	ldr	r3, [pc, #428]	; (8004928 <UART_SetConfig+0x2f4>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004786:	d017      	beq.n	80047b8 <UART_SetConfig+0x184>
 8004788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800478c:	d817      	bhi.n	80047be <UART_SetConfig+0x18a>
 800478e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004792:	d00b      	beq.n	80047ac <UART_SetConfig+0x178>
 8004794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004798:	d811      	bhi.n	80047be <UART_SetConfig+0x18a>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <UART_SetConfig+0x172>
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d006      	beq.n	80047b2 <UART_SetConfig+0x17e>
 80047a4:	e00b      	b.n	80047be <UART_SetConfig+0x18a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	76fb      	strb	r3, [r7, #27]
 80047aa:	e00d      	b.n	80047c8 <UART_SetConfig+0x194>
 80047ac:	2302      	movs	r3, #2
 80047ae:	76fb      	strb	r3, [r7, #27]
 80047b0:	e00a      	b.n	80047c8 <UART_SetConfig+0x194>
 80047b2:	2304      	movs	r3, #4
 80047b4:	76fb      	strb	r3, [r7, #27]
 80047b6:	e007      	b.n	80047c8 <UART_SetConfig+0x194>
 80047b8:	2308      	movs	r3, #8
 80047ba:	76fb      	strb	r3, [r7, #27]
 80047bc:	e004      	b.n	80047c8 <UART_SetConfig+0x194>
 80047be:	2310      	movs	r3, #16
 80047c0:	76fb      	strb	r3, [r7, #27]
 80047c2:	e001      	b.n	80047c8 <UART_SetConfig+0x194>
 80047c4:	2310      	movs	r3, #16
 80047c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a54      	ldr	r2, [pc, #336]	; (8004920 <UART_SetConfig+0x2ec>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d173      	bne.n	80048ba <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047d2:	7efb      	ldrb	r3, [r7, #27]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d824      	bhi.n	8004822 <UART_SetConfig+0x1ee>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x1ac>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004823 	.word	0x08004823
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004823 	.word	0x08004823
 80047f0:	08004813 	.word	0x08004813
 80047f4:	08004823 	.word	0x08004823
 80047f8:	08004823 	.word	0x08004823
 80047fc:	08004823 	.word	0x08004823
 8004800:	0800481b 	.word	0x0800481b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe fe76 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004808:	6178      	str	r0, [r7, #20]
        break;
 800480a:	e00f      	b.n	800482c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480c:	4b48      	ldr	r3, [pc, #288]	; (8004930 <UART_SetConfig+0x2fc>)
 800480e:	617b      	str	r3, [r7, #20]
        break;
 8004810:	e00c      	b.n	800482c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004812:	f7fe fdd7 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004816:	6178      	str	r0, [r7, #20]
        break;
 8004818:	e008      	b.n	800482c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481e:	617b      	str	r3, [r7, #20]
        break;
 8004820:	e004      	b.n	800482c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	76bb      	strb	r3, [r7, #26]
        break;
 800482a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80fe 	beq.w	8004a30 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	d305      	bcc.n	8004850 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	429a      	cmp	r2, r3
 800484e:	d902      	bls.n	8004856 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	76bb      	strb	r3, [r7, #26]
 8004854:	e0ec      	b.n	8004a30 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4618      	mov	r0, r3
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	020b      	lsls	r3, r1, #8
 8004868:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800486c:	0202      	lsls	r2, r0, #8
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	6849      	ldr	r1, [r1, #4]
 8004872:	0849      	lsrs	r1, r1, #1
 8004874:	4608      	mov	r0, r1
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	1814      	adds	r4, r2, r0
 800487c:	eb43 0501 	adc.w	r5, r3, r1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	461a      	mov	r2, r3
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f7fb fc9d 	bl	80001cc <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4613      	mov	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a0:	d308      	bcc.n	80048b4 <UART_SetConfig+0x280>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a8:	d204      	bcs.n	80048b4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	e0bd      	b.n	8004a30 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	76bb      	strb	r3, [r7, #26]
 80048b8:	e0ba      	b.n	8004a30 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c2:	d168      	bne.n	8004996 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80048c4:	7efb      	ldrb	r3, [r7, #27]
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d834      	bhi.n	8004934 <UART_SetConfig+0x300>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <UART_SetConfig+0x29c>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	08004935 	.word	0x08004935
 80048e0:	0800490b 	.word	0x0800490b
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	08004935 	.word	0x08004935
 80048f0:	08004913 	.word	0x08004913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fe fdfe 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80048f8:	6178      	str	r0, [r7, #20]
        break;
 80048fa:	e020      	b.n	800493e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe fe10 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 8004900:	6178      	str	r0, [r7, #20]
        break;
 8004902:	e01c      	b.n	800493e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <UART_SetConfig+0x2fc>)
 8004906:	617b      	str	r3, [r7, #20]
        break;
 8004908:	e019      	b.n	800493e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7fe fd5b 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800490e:	6178      	str	r0, [r7, #20]
        break;
 8004910:	e015      	b.n	800493e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004916:	617b      	str	r3, [r7, #20]
        break;
 8004918:	e011      	b.n	800493e <UART_SetConfig+0x30a>
 800491a:	bf00      	nop
 800491c:	efff69f3 	.word	0xefff69f3
 8004920:	40008000 	.word	0x40008000
 8004924:	40013800 	.word	0x40013800
 8004928:	40021000 	.word	0x40021000
 800492c:	40004400 	.word	0x40004400
 8004930:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	76bb      	strb	r3, [r7, #26]
        break;
 800493c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d075      	beq.n	8004a30 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	005a      	lsls	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	b29b      	uxth	r3, r3
 800495a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d916      	bls.n	8004990 <UART_SetConfig+0x35c>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d212      	bcs.n	8004990 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f023 030f 	bic.w	r3, r3, #15
 8004972:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	b29b      	uxth	r3, r3
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	b29a      	uxth	r2, r3
 8004980:	89fb      	ldrh	r3, [r7, #14]
 8004982:	4313      	orrs	r3, r2
 8004984:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	89fa      	ldrh	r2, [r7, #14]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	e04f      	b.n	8004a30 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	76bb      	strb	r3, [r7, #26]
 8004994:	e04c      	b.n	8004a30 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004996:	7efb      	ldrb	r3, [r7, #27]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d828      	bhi.n	80049ee <UART_SetConfig+0x3ba>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x370>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fd94 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80049cc:	6178      	str	r0, [r7, #20]
        break;
 80049ce:	e013      	b.n	80049f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fe fda6 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 80049d4:	6178      	str	r0, [r7, #20]
        break;
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <UART_SetConfig+0x414>)
 80049da:	617b      	str	r3, [r7, #20]
        break;
 80049dc:	e00c      	b.n	80049f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fe fcf1 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80049e2:	6178      	str	r0, [r7, #20]
        break;
 80049e4:	e008      	b.n	80049f8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	617b      	str	r3, [r7, #20]
        break;
 80049ec:	e004      	b.n	80049f8 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	76bb      	strb	r3, [r7, #26]
        break;
 80049f6:	bf00      	nop
    }

    if (pclk != 0U)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085a      	lsrs	r2, r3, #1
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d908      	bls.n	8004a2c <UART_SetConfig+0x3f8>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d204      	bcs.n	8004a2c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	e001      	b.n	8004a30 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bdb0      	pop	{r4, r5, r7, pc}
 8004a46:	bf00      	nop
 8004a48:	00f42400 	.word	0x00f42400

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4a:	d10a      	bne.n	8004b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba0:	f7fc fa0c 	bl	8000fbc <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d10e      	bne.n	8004bd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f82d 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e023      	b.n	8004c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d10e      	bne.n	8004bfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f817 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e00d      	b.n	8004c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c32:	e05e      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3a:	d05a      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3c:	f7fc f9be 	bl	8000fbc <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11b      	bne.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e043      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02c      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca6:	d124      	bne.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cc0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e00f      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d091      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4d0d      	ldr	r5, [pc, #52]	; (8004d54 <__libc_init_array+0x38>)
 8004d20:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	2600      	movs	r6, #0
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	4d0b      	ldr	r5, [pc, #44]	; (8004d5c <__libc_init_array+0x40>)
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	; (8004d60 <__libc_init_array+0x44>)
 8004d30:	f000 f820 	bl	8004d74 <_init>
 8004d34:	1b64      	subs	r4, r4, r5
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	2600      	movs	r6, #0
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08004e0c 	.word	0x08004e0c
 8004d58:	08004e0c 	.word	0x08004e0c
 8004d5c:	08004e0c 	.word	0x08004e0c
 8004d60:	08004e10 	.word	0x08004e10

08004d64 <memset>:
 8004d64:	4402      	add	r2, r0
 8004d66:	4603      	mov	r3, r0
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <memset+0xa>
 8004d6c:	4770      	bx	lr
 8004d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d72:	e7f9      	b.n	8004d68 <memset+0x4>

08004d74 <_init>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr

08004d80 <_fini>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr
