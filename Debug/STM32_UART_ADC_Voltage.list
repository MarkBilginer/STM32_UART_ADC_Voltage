
STM32_UART_ADC_Voltage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006618  08006618  00016618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e0  080066e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000074  0800675c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800675c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012340  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  000323e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00034698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  000357b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fc7  00000000  00000000  000367f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f22  00000000  00000000  000587b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7640  00000000  00000000  0006a6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c5c  00000000  00000000  00141d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065fc 	.word	0x080065fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080065fc 	.word	0x080065fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468c      	mov	ip, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8083 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d947      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b142      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	f1c2 0020 	rsb	r0, r2, #32
 8000ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4097      	lsls	r7, r2
 8000bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc0:	fa1f fe87 	uxth.w	lr, r7
 8000bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bda:	f080 8119 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8116 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	443b      	add	r3, r7
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8105 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8102 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c18:	eba4 040e 	sub.w	r4, r4, lr
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d150      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2601      	movs	r6, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c21      	lsrs	r1, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	1879      	adds	r1, r7, r1
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	f200 80e9 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d9 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7bf      	b.n	8000c1e <__udivmoddi4+0x96>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <__udivmoddi4+0x282>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f683 	clz	r6, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b8 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0103 	sbc.w	r1, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d0a8      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce4:	4097      	lsls	r7, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cee:	40d9      	lsrs	r1, r3
 8000cf0:	4330      	orrs	r0, r6
 8000cf2:	0c03      	lsrs	r3, r0, #16
 8000cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb06 f108 	mul.w	r1, r6, r8
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d16:	f080 808d 	bcs.w	8000e34 <__udivmoddi4+0x2ac>
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	f240 808a 	bls.w	8000e34 <__udivmoddi4+0x2ac>
 8000d20:	3e02      	subs	r6, #2
 8000d22:	443b      	add	r3, r7
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b281      	uxth	r1, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d42:	d273      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d971      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4439      	add	r1, r7
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c6 0c20 	rsb	ip, r6, #32
 8000d58:	fa03 f406 	lsl.w	r4, r3, r6
 8000d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d60:	431c      	orrs	r4, r3
 8000d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d66:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d72:	431f      	orrs	r7, r3
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fa1f f884 	uxth.w	r8, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d86:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d90:	fa00 f306 	lsl.w	r3, r0, r6
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x220>
 8000d96:	1861      	adds	r1, r4, r1
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d9c:	d248      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	d946      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4421      	add	r1, r4
 8000da8:	eba1 010a 	sub.w	r1, r1, sl
 8000dac:	b2bf      	uxth	r7, r7
 8000dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dba:	fb00 f808 	mul.w	r8, r0, r8
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x24a>
 8000dc2:	19e7      	adds	r7, r4, r7
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc8:	d22e      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d92c      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4427      	add	r7, r4
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	eba7 0708 	sub.w	r7, r7, r8
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	454f      	cmp	r7, r9
 8000de0:	46c6      	mov	lr, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	d31a      	bcc.n	8000e1c <__udivmoddi4+0x294>
 8000de6:	d017      	beq.n	8000e18 <__udivmoddi4+0x290>
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x27a>
 8000dea:	ebb3 020e 	subs.w	r2, r3, lr
 8000dee:	eb67 0701 	sbc.w	r7, r7, r1
 8000df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df6:	40f2      	lsrs	r2, r6
 8000df8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfc:	40f7      	lsrs	r7, r6
 8000dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8000e02:	2600      	movs	r6, #0
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e70b      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fd      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e5      	bcs.n	8000de8 <__udivmoddi4+0x260>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0104 	sbc.w	r1, r9, r4
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7df      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e7d2      	b.n	8000dd2 <__udivmoddi4+0x24a>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78d      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7b9      	b.n	8000da8 <__udivmoddi4+0x220>
 8000e34:	4666      	mov	r6, ip
 8000e36:	e775      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e74a      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	4439      	add	r1, r7
 8000e42:	e713      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e724      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <init_hal>:

UART_HandleTypeDef huart2;



void init_hal(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_Init();
 8000e54:	f000 fcd3 	bl	80017fe <HAL_Init>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <tim_base_start_interrupt>:


void tim_base_start_interrupt(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <tim_base_start_interrupt+0x10>)
 8000e62:	f003 fbab 	bl	80045bc <HAL_TIM_Base_Start_IT>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000f4 	.word	0x200000f4

08000e70 <uart_print>:


void uart_print(char text[]){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) text, strlen(text), 100);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff f9a9 	bl	80001d0 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <uart_print+0x24>)
 8000e88:	f003 ffca 	bl	8004e20 <HAL_UART_Transmit>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000140 	.word	0x20000140

08000e98 <reverse>:


// Reverses a string 'str' of length 'len'
void reverse(char* str, int len){
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000eac:	e018      	b.n	8000ee0 <reverse+0x48>
        temp = str[i];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	441a      	add	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	440b      	add	r3, r1
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	701a      	strb	r2, [r3, #0]
        i++;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
        j--;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbe2      	blt.n	8000eae <reverse+0x16>
    }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <intToStr>:

// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    while (x) {
 8000f08:	e01d      	b.n	8000f46 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <intToStr+0x8c>)
 8000f0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f12:	1099      	asrs	r1, r3, #2
 8000f14:	17d3      	asrs	r3, r2, #31
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	460b      	mov	r3, r1
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	1ad1      	subs	r1, r2, r3
 8000f22:	b2ca      	uxtb	r2, r1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	1c59      	adds	r1, r3, #1
 8000f28:	6179      	str	r1, [r7, #20]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	440b      	add	r3, r1
 8000f30:	3230      	adds	r2, #48	; 0x30
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <intToStr+0x8c>)
 8000f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3e:	1092      	asrs	r2, r2, #2
 8000f40:	17db      	asrs	r3, r3, #31
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	60fb      	str	r3, [r7, #12]
    while (x) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1de      	bne.n	8000f0a <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8000f4c:	e007      	b.n	8000f5e <intToStr+0x66>
        str[i++] = '0';
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	617a      	str	r2, [r7, #20]
 8000f54:	461a      	mov	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dbf3      	blt.n	8000f4e <intToStr+0x56>

    reverse(str, i);
 8000f66:	6979      	ldr	r1, [r7, #20]
 8000f68:	68b8      	ldr	r0, [r7, #8]
 8000f6a:	f7ff ff95 	bl	8000e98 <reverse>
    str[i] = '\0';
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
    return i;
 8000f78:	697b      	ldr	r3, [r7, #20]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	66666667 	.word	0x66666667

08000f88 <ftoa>:


// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f92:	60b8      	str	r0, [r7, #8]
 8000f94:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8000f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9e:	ee17 3a90 	vmov	r3, s15
 8000fa2:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	69f8      	ldr	r0, [r7, #28]
 8000fc0:	f7ff ff9a 	bl	8000ef8 <intToStr>
 8000fc4:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d030      	beq.n	800102e <ftoa+0xa6>
        res[i] = '.'; // add dot
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	222e      	movs	r2, #46	; 0x2e
 8000fd4:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8000fd6:	69b8      	ldr	r0, [r7, #24]
 8000fd8:	f7ff fa66 	bl	80004a8 <__aeabi_f2d>
 8000fdc:	4604      	mov	r4, r0
 8000fde:	460d      	mov	r5, r1
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fa4f 	bl	8000484 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	ec43 2b11 	vmov	d1, r2, r3
 8000fee:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001038 <ftoa+0xb0>
 8000ff2:	f004 fb4f 	bl	8005694 <pow>
 8000ff6:	ec53 2b10 	vmov	r2, r3, d0
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff faab 	bl	8000558 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fd55 	bl	8000ab8 <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001012:	edd7 7a06 	vldr	s15, [r7, #24]
 8001016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4619      	mov	r1, r3
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff ff65 	bl	8000ef8 <intToStr>
    }
}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bdb0      	pop	{r4, r5, r7, pc}
 8001036:	bf00      	nop
 8001038:	00000000 	.word	0x00000000
 800103c:	40240000 	.word	0x40240000

08001040 <HAL_TIM_PeriodElapsedCallback>:
/** @brief Period elapsed callback in non-blocking mode, toggles LED GREEN and RED
 *
 * @param htim TIM handle
 * @return None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	float adc_reading;
	float reading_voltage;
	char reading_voltage_str[5];
	float resolution_adc = 4096;
 8001048:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float sys_voltage = 3.33f;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
	char str1[] = "Measured: ";
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	ca07      	ldmia	r2, {r0, r1, r2}
 800105a:	c303      	stmia	r3!, {r0, r1}
 800105c:	801a      	strh	r2, [r3, #0]
 800105e:	3302      	adds	r3, #2
 8001060:	0c12      	lsrs	r2, r2, #16
 8001062:	701a      	strb	r2, [r3, #0]
	char str2[] = "V\r\n";
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001066:	60bb      	str	r3, [r7, #8]

	HAL_ADC_Start(&hadc1);
 8001068:	481f      	ldr	r0, [pc, #124]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800106a:	f000 ff9b 	bl	8001fa4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800106e:	2164      	movs	r1, #100	; 0x64
 8001070:	481d      	ldr	r0, [pc, #116]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001072:	f001 f82d 	bl	80020d0 <HAL_ADC_PollForConversion>
	adc_reading = HAL_ADC_GetValue(&hadc1);
 8001076:	481c      	ldr	r0, [pc, #112]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001078:	f001 f8b9 	bl	80021ee <HAL_ADC_GetValue>
 800107c:	ee07 0a90 	vmov	s15, r0
 8001080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001084:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	HAL_ADC_Stop(&hadc1);
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800108a:	f000 ffee 	bl	800206a <HAL_ADC_Stop>

	reading_voltage = (adc_reading * sys_voltage)/resolution_adc;
 800108e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001096:	ee67 6a27 	vmul.f32	s13, s14, s15
 800109a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800109e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a2:	edc7 7a08 	vstr	s15, [r7, #32]
	ftoa(reading_voltage, reading_voltage_str, 1);
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	ed97 0a08 	vldr	s0, [r7, #32]
 80010b2:	f7ff ff69 	bl	8000f88 <ftoa>

	uart_print(str1);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fed8 	bl	8000e70 <uart_print>
	uart_print(reading_voltage_str);
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fed3 	bl	8000e70 <uart_print>
	uart_print(str2);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fece 	bl	8000e70 <uart_print>
}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	; 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40551eb8 	.word	0x40551eb8
 80010e0:	08006618 	.word	0x08006618
 80010e4:	000a0d56 	.word	0x000a0d56
 80010e8:	20000090 	.word	0x20000090

080010ec <config_system_clock>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void config_system_clock(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ac      	sub	sp, #176	; 0xb0
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fac2 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2254      	movs	r2, #84	; 0x54
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fab4 	bl	8005684 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800111c:	f002 f866 	bl	80031ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <config_system_clock+0x124>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <config_system_clock+0x124>)
 8001128:	f023 0318 	bic.w	r3, r3, #24
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001130:	2314      	movs	r3, #20
 8001132:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001150:	2301      	movs	r3, #1
 8001152:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800115c:	2310      	movs	r3, #16
 800115e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001162:	2307      	movs	r3, #7
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f8ab 	bl	80032d4 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <config_system_clock+0x9c>
  {
    Error_Handler();
 8001184:	f000 f982 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2303      	movs	r3, #3
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800119c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fcb6 	bl	8003b14 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <config_system_clock+0xc6>
  {
    Error_Handler();
 80011ae:	f000 f96d 	bl	800148c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80011b2:	f244 0302 	movw	r3, #16386	; 0x4002
 80011b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80011ca:	2310      	movs	r3, #16
 80011cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011ce:	2307      	movs	r3, #7
 80011d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fe9c 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <config_system_clock+0x106>
  {
    Error_Handler();
 80011ee:	f000 f94d 	bl	800148c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f6:	f002 f817 	bl	8003228 <HAL_PWREx_ControlVoltageScaling>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <config_system_clock+0x118>
  {
    Error_Handler();
 8001200:	f000 f944 	bl	800148c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001204:	f003 f880 	bl	8004308 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001208:	bf00      	nop
 800120a:	37b0      	adds	r7, #176	; 0xb0
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000

08001214 <init_adc1>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void init_adc1(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <init_adc1+0xbc>)
 800122c:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <init_adc1+0xc0>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <init_adc1+0xbc>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <init_adc1+0xbc>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <init_adc1+0xbc>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <init_adc1+0xbc>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <init_adc1+0xbc>)
 800124a:	2204      	movs	r2, #4
 800124c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <init_adc1+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <init_adc1+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <init_adc1+0xbc>)
 800125c:	2201      	movs	r2, #1
 800125e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <init_adc1+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <init_adc1+0xbc>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <init_adc1+0xbc>)
 8001270:	2200      	movs	r2, #0
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <init_adc1+0xbc>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <init_adc1+0xbc>)
 800127e:	2200      	movs	r2, #0
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <init_adc1+0xbc>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <init_adc1+0xbc>)
 800128c:	f000 fd42 	bl	8001d14 <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <init_adc1+0x86>
  {
    Error_Handler();
 8001296:	f000 f8f9 	bl	800148c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <init_adc1+0xc4>)
 800129c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129e:	2306      	movs	r3, #6
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a6:	237f      	movs	r3, #127	; 0x7f
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012aa:	2304      	movs	r3, #4
 80012ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <init_adc1+0xbc>)
 80012b8:	f000 ffa6 	bl	8002208 <HAL_ADC_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <init_adc1+0xb2>
  {
    Error_Handler();
 80012c2:	f000 f8e3 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000090 	.word	0x20000090
 80012d4:	50040000 	.word	0x50040000
 80012d8:	14f00020 	.word	0x14f00020

080012dc <init_timer1>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void init_timer1(uint32_t prescaler, uint32_t cnt_mode, uint32_t period,
		uint32_t clk_div, uint32_t rep_cnt, uint32_t reload_preload_enable){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <init_timer1+0xac>)
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <init_timer1+0xb0>)
 8001308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <init_timer1+0xac>)
 800130c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <init_timer1+0xac>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32000;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <init_timer1+0xac>)
 800131a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800131e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <init_timer1+0xac>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <init_timer1+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <init_timer1+0xac>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <init_timer1+0xac>)
 8001334:	f003 f8ea 	bl	800450c <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <init_timer1+0x66>
  {
    Error_Handler();
 800133e:	f000 f8a5 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4619      	mov	r1, r3
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <init_timer1+0xac>)
 8001350:	f003 faa7 	bl	80048a2 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <init_timer1+0x82>
  {
    Error_Handler();
 800135a:	f000 f897 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <init_timer1+0xac>)
 8001372:	f003 fc83 	bl	8004c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <init_timer1+0xa4>
  {
    Error_Handler();
 800137c:	f000 f886 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3730      	adds	r7, #48	; 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000f4 	.word	0x200000f4
 800138c:	40012c00 	.word	0x40012c00

08001390 <init_uart>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void init_uart(uint32_t baudrate){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <init_uart+0x60>)
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <init_uart+0x64>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <init_uart+0x60>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <init_uart+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <init_uart+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <init_uart+0x60>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <init_uart+0x60>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <init_uart+0x60>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <init_uart+0x60>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <init_uart+0x60>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <init_uart+0x60>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <init_uart+0x60>)
 80013d8:	f003 fcd4 	bl	8004d84 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <init_uart+0x56>
  {
    Error_Handler();
 80013e2:	f000 f853 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000140 	.word	0x20000140
 80013f4:	40004400 	.word	0x40004400

080013f8 <init_gpio>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void init_gpio(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <init_gpio+0x8c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <init_gpio+0x8c>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <init_gpio+0x8c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <init_gpio+0x8c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <init_gpio+0x8c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <init_gpio+0x8c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <init_gpio+0x8c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <init_gpio+0x8c>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <init_gpio+0x8c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2108      	movs	r1, #8
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <init_gpio+0x90>)
 800145c:	f001 feae 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001460:	2308      	movs	r3, #8
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <init_gpio+0x90>)
 8001478:	f001 fd36 	bl	8002ee8 <HAL_GPIO_Init>

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	48000400 	.word	0x48000400

0800148c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>

08001496 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	application();
 800149a:	f000 f969 	bl	8001770 <application>
 800149e:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* USER CODE END 3 */
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_MspInit+0x44>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_MspInit+0x44>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6613      	str	r3, [r2, #96]	; 0x60
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_MspInit+0x44>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x44>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x44>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x44>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_ADC_MspInit+0x74>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d124      	bne.n	8001558 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_ADC_MspInit+0x78>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_ADC_MspInit+0x78>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001542:	230b      	movs	r3, #11
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f001 fcc8 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	50040000 	.word	0x50040000
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_TIM_Base_MspInit+0x44>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d113      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2019      	movs	r0, #25
 8001598:	f001 fc6f 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800159c:	2019      	movs	r0, #25
 800159e:	f001 fc88 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_UART_MspInit+0xa0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d13a      	bne.n	800164c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_UART_MspInit+0xa4>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_UART_MspInit+0xa4>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_UART_MspInit+0xa4>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_UART_MspInit+0xa4>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_UART_MspInit+0xa4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_UART_MspInit+0xa4>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001606:	2304      	movs	r3, #4
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001616:	2307      	movs	r3, #7
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f001 fc60 	bl	8002ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800163a:	2303      	movs	r3, #3
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fc4e 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004400 	.word	0x40004400
 8001658:	40021000 	.word	0x40021000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8fe 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016b6:	f002 ffd5 	bl	8004664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000f4 	.word	0x200000f4

080016c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <SystemInit+0x5c>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <SystemInit+0x5c>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <SystemInit+0x60>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <SystemInit+0x60>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <SystemInit+0x60>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <SystemInit+0x60>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <SystemInit+0x60>)
 80016f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <SystemInit+0x60>)
 80016fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001700:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <SystemInit+0x60>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <SystemInit+0x60>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SystemInit+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	40021000 	.word	0x40021000

08001728 <config_timer>:
 *      Author: mark
 */
#include "timer_adc_voltage_app.h"

void config_timer(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af02      	add	r7, sp, #8
	init_timer1(1000, TIM_COUNTERMODE_UP, 32000, TIM_CLOCKDIVISION_DIV1,
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800173c:	2100      	movs	r1, #0
 800173e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001742:	f7ff fdcb 	bl	80012dc <init_timer1>
		0, TIM_AUTORELOAD_PRELOAD_ENABLE);
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <setup_mcu>:

void setup_mcu(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick.*/
	init_hal();
 8001750:	f7ff fb7e 	bl	8000e50 <init_hal>

	/* Configure the system clock */
	config_system_clock();
 8001754:	f7ff fcca 	bl	80010ec <config_system_clock>

	/* Initialize all configured peripherals */
	init_gpio();
 8001758:	f7ff fe4e 	bl	80013f8 <init_gpio>
	init_uart(115200);
 800175c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001760:	f7ff fe16 	bl	8001390 <init_uart>
	init_adc1();
 8001764:	f7ff fd56 	bl	8001214 <init_adc1>
	config_timer();
 8001768:	f7ff ffde 	bl	8001728 <config_timer>

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <application>:

void application(void)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
	setup_mcu();
 8001776:	f7ff ffe9 	bl	800174c <setup_mcu>

	char credentials[] = "Assignment 2 - <Mark> <Bilginer>\r\n";
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <application+0x38>)
 800177c:	1d3c      	adds	r4, r7, #4
 800177e:	461d      	mov	r5, r3
 8001780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	8022      	strh	r2, [r4, #0]
 800178e:	3402      	adds	r4, #2
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	7023      	strb	r3, [r4, #0]
	uart_print(credentials);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb6a 	bl	8000e70 <uart_print>

	tim_base_start_interrupt();
 800179c:	f7ff fb5e 	bl	8000e5c <tim_base_start_interrupt>
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	08006624 	.word	0x08006624

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff ff88 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017b6:	e003      	b.n	80017c0 <LoopCopyDataInit>

080017b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017be:	3104      	adds	r1, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017c8:	d3f6      	bcc.n	80017b8 <CopyDataInit>
	ldr	r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017cc:	e002      	b.n	80017d4 <LoopFillZerobss>

080017ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017d0:	f842 3b04 	str.w	r3, [r2], #4

080017d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <LoopForever+0x16>)
	cmp	r2, r3
 80017d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017d8:	d3f9      	bcc.n	80017ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f003 ff2f 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7ff fe5a 	bl	8001496 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80017e8:	080066e8 	.word	0x080066e8
	ldr	r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017f0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80017f4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80017f8:	200001c8 	.word	0x200001c8

080017fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_IRQHandler>

080017fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f001 fb2b 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fe40 	bl	80014a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fb37 	bl	8002ece <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001874:	f001 fb01 	bl	8002e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	200001c4 	.word	0x200001c4

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200001c4 	.word	0x200001c4

080018e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3360      	adds	r3, #96	; 0x60
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <LL_ADC_SetOffset+0x44>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	4313      	orrs	r3, r2
 8001980:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	03fff000 	.word	0x03fff000

08001998 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3360      	adds	r3, #96	; 0x60
 80019a6:	461a      	mov	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3360      	adds	r3, #96	; 0x60
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3330      	adds	r3, #48	; 0x30
 8001a30:	461a      	mov	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	211f      	movs	r1, #31
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	f003 011f 	and.w	r1, r3, #31
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3314      	adds	r3, #20
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0e5b      	lsrs	r3, r3, #25
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	0d1b      	lsrs	r3, r3, #20
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2107      	movs	r1, #7
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	401a      	ands	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	0d1b      	lsrs	r3, r3, #20
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0318 	and.w	r3, r3, #24
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001af4:	40d9      	lsrs	r1, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	400b      	ands	r3, r1
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	0007ffff 	.word	0x0007ffff

08001b18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6093      	str	r3, [r2, #8]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf0:	f043 0202 	orr.w	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <LL_ADC_IsEnabled+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_ADC_IsEnabled+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsDisableOngoing+0x18>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsDisableOngoing+0x1a>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c64:	f043 0204 	orr.w	r2, r3, #4
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cda:	f043 0220 	orr.w	r2, r3, #32
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e12c      	b.n	8001f88 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fbd5 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fef1 	bl	8001b3c <LL_ADC_IsDeepPowerDownEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fed7 	bl	8001b18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff0c 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fef0 	bl	8001b64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d84:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <HAL_ADC_Init+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	4a82      	ldr	r2, [pc, #520]	; (8001f94 <HAL_ADC_Init+0x280>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f9      	bne.n	8001d9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff feee 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff62 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 80c5 	bne.w	8001f76 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80c1 	bne.w	8001f76 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dfc:	f043 0202 	orr.w	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fefb 	bl	8001c04 <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10b      	bne.n	8001e2c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e14:	4860      	ldr	r0, [pc, #384]	; (8001f98 <HAL_ADC_Init+0x284>)
 8001e16:	f7ff fef5 	bl	8001c04 <LL_ADC_IsEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4619      	mov	r1, r3
 8001e26:	485d      	ldr	r0, [pc, #372]	; (8001f9c <HAL_ADC_Init+0x288>)
 8001e28:	f7ff fd5e 	bl	80018e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e5b      	ldrb	r3, [r3, #25]
 8001e30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d106      	bne.n	8001e68 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	045b      	lsls	r3, r3, #17
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <HAL_ADC_Init+0x28c>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff feff 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff20 	bl	8001cee <LL_ADC_INJ_IsConversionOngoing>
 8001eae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d13d      	bne.n	8001f32 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d13a      	bne.n	8001f32 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed8:	f023 0302 	bic.w	r3, r3, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d118      	bne.n	8001f22 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f12:	430a      	orrs	r2, r1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	e007      	b.n	8001f32 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10c      	bne.n	8001f54 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f023 010f 	bic.w	r1, r3, #15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
 8001f52:	e007      	b.n	8001f64 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 020f 	bic.w	r2, r2, #15
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f023 0303 	bic.w	r3, r3, #3
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	053e2d63 	.word	0x053e2d63
 8001f98:	50040000 	.word	0x50040000
 8001f9c:	50040300 	.word	0x50040300
 8001fa0:	fff0c007 	.word	0xfff0c007

08001fa4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe75 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d14f      	bne.n	800205c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Start+0x26>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e04b      	b.n	8002062 <HAL_ADC_Start+0xbe>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fdb4 	bl	8002b40 <ADC_Enable>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d137      	bne.n	8002052 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002002:	d106      	bne.n	8002012 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f023 0206 	bic.w	r2, r3, #6
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	; 0x58
 8002010:	e002      	b.n	8002018 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	221c      	movs	r2, #28
 800201e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe00 	bl	8001c50 <LL_ADC_REG_StartConversion>
 8002050:	e006      	b.n	8002060 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800205a:	e001      	b.n	8002060 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_ADC_Stop+0x16>
 800207c:	2302      	movs	r3, #2
 800207e:	e023      	b.n	80020c8 <HAL_ADC_Stop+0x5e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002088:	2103      	movs	r1, #3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fc9c 	bl	80029c8 <ADC_ConversionStop>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d111      	bne.n	80020be <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fdb2 	bl	8002c04 <ADC_Disable>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d102      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020e2:	2308      	movs	r3, #8
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e010      	b.n	800210a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0220 	orr.w	r2, r3, #32
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06f      	b.n	80021e6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002106:	2304      	movs	r3, #4
 8002108:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800210a:	f7ff fbe1 	bl	80018d0 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002110:	e021      	b.n	8002156 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002118:	d01d      	beq.n	8002156 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800211a:	f7ff fbd9 	bl	80018d0 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <HAL_ADC_PollForConversion+0x60>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d112      	bne.n	8002156 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e047      	b.n	80021e6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0d6      	beq.n	8002112 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fc40 	bl	80019fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01c      	beq.n	80021ba <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e5b      	ldrb	r3, [r3, #25]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d118      	bne.n	80021ba <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b08      	cmp	r3, #8
 8002194:	d111      	bne.n	80021ba <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d104      	bne.n	80021d2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e008      	b.n	80021e4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	220c      	movs	r2, #12
 80021e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0b6      	sub	sp, #216	; 0xd8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x22>
 8002226:	2302      	movs	r3, #2
 8002228:	e3b9      	b.n	800299e <HAL_ADC_ConfigChannel+0x796>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fd32 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 839e 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d824      	bhi.n	8002296 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	3b02      	subs	r3, #2
 8002252:	2b03      	cmp	r3, #3
 8002254:	d81b      	bhi.n	800228e <HAL_ADC_ConfigChannel+0x86>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_ADC_ConfigChannel+0x54>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800226d 	.word	0x0800226d
 8002260:	08002275 	.word	0x08002275
 8002264:	0800227d 	.word	0x0800227d
 8002268:	08002285 	.word	0x08002285
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	220c      	movs	r2, #12
 8002270:	605a      	str	r2, [r3, #4]
          break;
 8002272:	e011      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2212      	movs	r2, #18
 8002278:	605a      	str	r2, [r3, #4]
          break;
 800227a:	e00d      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2218      	movs	r2, #24
 8002280:	605a      	str	r2, [r3, #4]
          break;
 8002282:	e009      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	605a      	str	r2, [r3, #4]
          break;
 800228c:	e004      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2206      	movs	r2, #6
 8002292:	605a      	str	r2, [r3, #4]
          break;
 8002294:	e000      	b.n	8002298 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002296:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f7ff fbbb 	bl	8001a20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fcf6 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 80022b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fd16 	bl	8001cee <LL_ADC_INJ_IsConversionOngoing>
 80022c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 81a6 	bne.w	800261c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 81a1 	bne.w	800261c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f7ff fbc6 	bl	8001a78 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00a      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800231e:	f7ff fb17 	bl	8001950 <LL_ADC_SetOffset>
 8002322:	e17b      	b.n	800261c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fb34 	bl	8001998 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x148>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fb29 	bl	8001998 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	e01e      	b.n	800238e <HAL_ADC_ConfigChannel+0x186>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fb1e 	bl	8001998 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e004      	b.n	800238c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x19e>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0e9b      	lsrs	r3, r3, #26
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	e018      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80023ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff faed 	bl	80019c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fad1 	bl	8001998 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x20e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fac6 	bl	8001998 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	e01e      	b.n	8002454 <HAL_ADC_ConfigChannel+0x24c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fabb 	bl	8001998 <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800243c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e004      	b.n	8002452 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x264>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	e018      	b.n	800249e <HAL_ADC_ConfigChannel+0x296>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e004      	b.n	800249e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fa8a 	bl	80019c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa6e 	bl	8001998 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10a      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x2d4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fa63 	bl	8001998 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	e01e      	b.n	800251a <HAL_ADC_ConfigChannel+0x312>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fa58 	bl	8001998 <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e004      	b.n	8002518 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800250e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x32a>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	e016      	b.n	8002560 <HAL_ADC_ConfigChannel+0x358>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800254a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e004      	b.n	8002560 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fa29 	bl	80019c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2103      	movs	r1, #3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fa0d 	bl	8001998 <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x396>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2103      	movs	r1, #3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fa02 	bl	8001998 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	e017      	b.n	80025ce <HAL_ADC_ConfigChannel+0x3c6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f9f7 	bl	8001998 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x3de>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	e011      	b.n	800260a <HAL_ADC_ConfigChannel+0x402>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800260a:	429a      	cmp	r2, r3
 800260c:	d106      	bne.n	800261c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	2103      	movs	r1, #3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f9d4 	bl	80019c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff faef 	bl	8001c04 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 813f 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f7ff fa48 	bl	8001ad0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a8e      	ldr	r2, [pc, #568]	; (8002880 <HAL_ADC_ConfigChannel+0x678>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f040 8130 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x46c>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2b09      	cmp	r3, #9
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e019      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x4a0>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002684:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b09      	cmp	r3, #9
 80026a0:	bf94      	ite	ls
 80026a2:	2301      	movls	r3, #1
 80026a4:	2300      	movhi	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d079      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x4c0>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x4ec>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80026e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x50c>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x53c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002724:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_ADC_ConfigChannel+0x562>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	051b      	lsls	r3, r3, #20
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x594>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800277c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e003      	b.n	800278e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279c:	430b      	orrs	r3, r1
 800279e:	e080      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x5b4>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ba:	e015      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x5e0>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x600>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0x630>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	61fb      	str	r3, [r7, #28]
  return result;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x65c>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002862:	e01d      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x698>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	613b      	str	r3, [r7, #16]
  return result;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e005      	b.n	800288c <HAL_ADC_ConfigChannel+0x684>
 8002880:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b1e      	subs	r3, #30
 800289a:	051b      	lsls	r3, r3, #20
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a0:	430b      	orrs	r3, r1
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6892      	ldr	r2, [r2, #8]
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7ff f8e6 	bl	8001a78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_ADC_ConfigChannel+0x7a0>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d06c      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b8:	483c      	ldr	r0, [pc, #240]	; (80029ac <HAL_ADC_ConfigChannel+0x7a4>)
 80028ba:	f7ff f83b 	bl	8001934 <LL_ADC_GetCommonPathInternalCh>
 80028be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_ADC_ConfigChannel+0x7a8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d127      	bne.n	800291c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d121      	bne.n	800291c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_ADC_ConfigChannel+0x7ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d157      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ea:	4619      	mov	r1, r3
 80028ec:	482f      	ldr	r0, [pc, #188]	; (80029ac <HAL_ADC_ConfigChannel+0x7a4>)
 80028ee:	f7ff f80e 	bl	800190e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_ADC_ConfigChannel+0x7b0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	4a30      	ldr	r2, [pc, #192]	; (80029bc <HAL_ADC_ConfigChannel+0x7b4>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800290c:	e002      	b.n	8002914 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b01      	subs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800291a:	e03a      	b.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d113      	bne.n	800294e <HAL_ADC_ConfigChannel+0x746>
 8002926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d12a      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002944:	4619      	mov	r1, r3
 8002946:	4819      	ldr	r0, [pc, #100]	; (80029ac <HAL_ADC_ConfigChannel+0x7a4>)
 8002948:	f7fe ffe1 	bl	800190e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800294c:	e021      	b.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d11c      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_ADC_ConfigChannel+0x7ac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800296e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002976:	4619      	mov	r1, r3
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <HAL_ADC_ConfigChannel+0x7a4>)
 800297a:	f7fe ffc8 	bl	800190e <LL_ADC_SetCommonPathInternalCh>
 800297e:	e008      	b.n	8002992 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800299a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	37d8      	adds	r7, #216	; 0xd8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	80080000 	.word	0x80080000
 80029ac:	50040300 	.word	0x50040300
 80029b0:	c7520000 	.word	0xc7520000
 80029b4:	50040000 	.word	0x50040000
 80029b8:	20000000 	.word	0x20000000
 80029bc:	053e2d63 	.word	0x053e2d63
 80029c0:	cb840000 	.word	0xcb840000
 80029c4:	80000001 	.word	0x80000001

080029c8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f95e 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 80029e4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f97f 	bl	8001cee <LL_ADC_INJ_IsConversionOngoing>
 80029f0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8098 	beq.w	8002b30 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02a      	beq.n	8002a64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7e5b      	ldrb	r3, [r3, #25]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d126      	bne.n	8002a64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7e1b      	ldrb	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d122      	bne.n	8002a64 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a22:	e014      	b.n	8002a4e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4a45      	ldr	r2, [pc, #276]	; (8002b3c <ADC_ConversionStop+0x174>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d90d      	bls.n	8002a48 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f043 0210 	orr.w	r2, r3, #16
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e074      	b.n	8002b32 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d1e3      	bne.n	8002a24 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d014      	beq.n	8002a94 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f916 	bl	8001ca0 <LL_ADC_REG_IsConversionOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f8d3 	bl	8001c2a <LL_ADC_IsDisableOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f8f2 	bl	8001c78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d014      	beq.n	8002ac4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f925 	bl	8001cee <LL_ADC_INJ_IsConversionOngoing>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f8bb 	bl	8001c2a <LL_ADC_IsDisableOngoing>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f901 	bl	8001cc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d005      	beq.n	8002ad6 <ADC_ConversionStop+0x10e>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d105      	bne.n	8002adc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	617b      	str	r3, [r7, #20]
        break;
 8002ad4:	e005      	b.n	8002ae2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	617b      	str	r3, [r7, #20]
        break;
 8002ada:	e002      	b.n	8002ae2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002adc:	2304      	movs	r3, #4
 8002ade:	617b      	str	r3, [r7, #20]
        break;
 8002ae0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fef5 	bl	80018d0 <HAL_GetTick>
 8002ae6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ae8:	e01b      	b.n	8002b22 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002aea:	f7fe fef1 	bl	80018d0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d914      	bls.n	8002b22 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 0210 	orr.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1dc      	bne.n	8002aea <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	a33fffff 	.word	0xa33fffff

08002b40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f859 	bl	8001c04 <LL_ADC_IsEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d14d      	bne.n	8002bf4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <ADC_Enable+0xc0>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e039      	b.n	8002bf6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f814 	bl	8001bb4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fea0 	bl	80018d0 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b92:	e028      	b.n	8002be6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f833 	bl	8001c04 <LL_ADC_IsEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f803 	bl	8001bb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bae:	f7fe fe8f 	bl	80018d0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d914      	bls.n	8002be6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d00d      	beq.n	8002be6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d1cf      	bne.n	8002b94 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	8000003f 	.word	0x8000003f

08002c04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f80a 	bl	8001c2a <LL_ADC_IsDisableOngoing>
 8002c16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fff1 	bl	8001c04 <LL_ADC_IsEnabled>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d047      	beq.n	8002cb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d144      	bne.n	8002cb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030d 	and.w	r3, r3, #13
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d10c      	bne.n	8002c56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe ffcb 	bl	8001bdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fe3f 	bl	80018d0 <HAL_GetTick>
 8002c52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c54:	e029      	b.n	8002caa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e023      	b.n	8002cba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c72:	f7fe fe2d 	bl	80018d0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d914      	bls.n	8002caa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0210 	orr.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e007      	b.n	8002cba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1dc      	bne.n	8002c72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff3e 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff8e 	bl	8002db8 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5d 	bl	8002d64 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef6:	e148      	b.n	800318a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 813a 	beq.w	8003184 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d00b      	beq.n	8002f30 <HAL_GPIO_Init+0x48>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f24:	2b11      	cmp	r3, #17
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0xea>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b12      	cmp	r3, #18
 8002fd0:	d123      	bne.n	800301a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	6939      	ldr	r1, [r7, #16]
 8003016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0203 	and.w	r2, r3, #3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8094 	beq.w	8003184 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305c:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <HAL_GPIO_Init+0x2c0>)
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_GPIO_Init+0x2c0>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6613      	str	r3, [r2, #96]	; 0x60
 8003068:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <HAL_GPIO_Init+0x2c0>)
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003074:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	3302      	adds	r3, #2
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800309e:	d00d      	beq.n	80030bc <HAL_GPIO_Init+0x1d4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <HAL_GPIO_Init+0x2c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <HAL_GPIO_Init+0x1d0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <HAL_GPIO_Init+0x2cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_GPIO_Init+0x1cc>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e004      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030b4:	2307      	movs	r3, #7
 80030b6:	e002      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030bc:	2300      	movs	r3, #0
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	f002 0203 	and.w	r2, r2, #3
 80030c4:	0092      	lsls	r2, r2, #2
 80030c6:	4093      	lsls	r3, r2
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ce:	4937      	ldr	r1, [pc, #220]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003100:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800312a:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	f47f aeaf 	bne.w	8002ef8 <HAL_GPIO_Init+0x10>
  }
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40010000 	.word	0x40010000
 80031b0:	48000400 	.word	0x48000400
 80031b4:	48000800 	.word	0x48000800
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40007000 	.word	0x40007000

0800320c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <HAL_PWREx_GetVoltageRange+0x18>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40007000 	.word	0x40007000

08003228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d130      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d038      	beq.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003254:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2232      	movs	r2, #50	; 0x32
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	3301      	adds	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326c:	e002      	b.n	8003274 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b01      	subs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003280:	d102      	bne.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f2      	bne.n	800326e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003294:	d110      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e00f      	b.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d007      	beq.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40007000 	.word	0x40007000
 80032cc:	20000000 	.word	0x20000000
 80032d0:	431bde83 	.word	0x431bde83

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f000 bc11 	b.w	8003b0a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e8:	4ba0      	ldr	r3, [pc, #640]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f2:	4b9e      	ldr	r3, [pc, #632]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80e4 	beq.w	80034d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_RCC_OscConfig+0x4c>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	f040 808b 	bne.w	800342e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b01      	cmp	r3, #1
 800331c:	f040 8087 	bne.w	800342e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003320:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x64>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e3e8      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	4b8b      	ldr	r3, [pc, #556]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_RCC_OscConfig+0x7e>
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003350:	e005      	b.n	800335e <HAL_RCC_OscConfig+0x8a>
 8003352:	4b86      	ldr	r3, [pc, #536]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335e:	4293      	cmp	r3, r2
 8003360:	d223      	bcs.n	80033aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fd7a 	bl	8003e60 <RCC_SetFlashLatencyFromMSIRange>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e3c9      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003376:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800337c:	f043 0308 	orr.w	r3, r3, #8
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4977      	ldr	r1, [pc, #476]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003394:	4b75      	ldr	r3, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	4972      	ldr	r1, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e025      	b.n	80033f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	496a      	ldr	r1, [pc, #424]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c8:	4b68      	ldr	r3, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	4965      	ldr	r1, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fd3a 	bl	8003e60 <RCC_SetFlashLatencyFromMSIRange>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e389      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f6:	f000 fc6f 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	495a      	ldr	r1, [pc, #360]	; (8003570 <HAL_RCC_OscConfig+0x29c>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a58      	ldr	r2, [pc, #352]	; (8003574 <HAL_RCC_OscConfig+0x2a0>)
 8003414:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003416:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_RCC_OscConfig+0x2a4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fa08 	bl	8001830 <HAL_InitTick>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d052      	beq.n	80034d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	e36d      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d032      	beq.n	800349c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003436:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4c      	ldr	r2, [pc, #304]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003442:	f7fe fa45 	bl	80018d0 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344a:	f7fe fa41 	bl	80018d0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e356      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800345c:	4b43      	ldr	r3, [pc, #268]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003468:	4b40      	ldr	r3, [pc, #256]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3f      	ldr	r2, [pc, #252]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800346e:	f043 0308 	orr.w	r3, r3, #8
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b3d      	ldr	r3, [pc, #244]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	493a      	ldr	r1, [pc, #232]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	4935      	ldr	r1, [pc, #212]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	e01a      	b.n	80034d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800349c:	4b33      	ldr	r3, [pc, #204]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a32      	ldr	r2, [pc, #200]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a8:	f7fe fa12 	bl	80018d0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b0:	f7fe fa0e 	bl	80018d0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e323      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c2:	4b2a      	ldr	r3, [pc, #168]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1dc>
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d073      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_OscConfig+0x21c>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d10e      	bne.n	8003508 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d10b      	bne.n	8003508 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d063      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d15f      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e300      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	d106      	bne.n	8003520 <HAL_RCC_OscConfig+0x24c>
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a15      	ldr	r2, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e01d      	b.n	800355c <HAL_RCC_OscConfig+0x288>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x270>
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a0f      	ldr	r2, [pc, #60]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e00b      	b.n	800355c <HAL_RCC_OscConfig+0x288>
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a05      	ldr	r2, [pc, #20]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe f9b4 	bl	80018d0 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356a:	e010      	b.n	800358e <HAL_RCC_OscConfig+0x2ba>
 800356c:	40021000 	.word	0x40021000
 8003570:	08006648 	.word	0x08006648
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe f9a8 	bl	80018d0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e2bd      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358e:	4baf      	ldr	r3, [pc, #700]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x2a8>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f998 	bl	80018d0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe f994 	bl	80018d0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e2a9      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b6:	4ba5      	ldr	r3, [pc, #660]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2d0>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d060      	beq.n	8003694 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x310>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d119      	bne.n	8003612 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d116      	bne.n	8003612 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e4:	4b99      	ldr	r3, [pc, #612]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x328>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e286      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b93      	ldr	r3, [pc, #588]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	4990      	ldr	r1, [pc, #576]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003610:	e040      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d023      	beq.n	8003662 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800361a:	4b8c      	ldr	r3, [pc, #560]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a8b      	ldr	r2, [pc, #556]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fe f953 	bl	80018d0 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe f94f 	bl	80018d0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e264      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	4b82      	ldr	r3, [pc, #520]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b7f      	ldr	r3, [pc, #508]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	497c      	ldr	r1, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	e018      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b7a      	ldr	r3, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a79      	ldr	r2, [pc, #484]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe f92f 	bl	80018d0 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe f92b 	bl	80018d0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e240      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003688:	4b70      	ldr	r3, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03c      	beq.n	800371a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a8:	4b68      	ldr	r3, [pc, #416]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	4a67      	ldr	r2, [pc, #412]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe f90a 	bl	80018d0 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe f906 	bl	80018d0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e21b      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d2:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCC_OscConfig+0x3ec>
 80036e0:	e01b      	b.n	800371a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e2:	4b5a      	ldr	r3, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe f8ed 	bl	80018d0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe f8e9 	bl	80018d0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1fe      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370c:	4b4f      	ldr	r3, [pc, #316]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ef      	bne.n	80036fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80a6 	beq.w	8003874 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800372c:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a43      	ldr	r2, [pc, #268]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003754:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376c:	f7fe f8b0 	bl	80018d0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fe f8ac 	bl	80018d0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1c1      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d108      	bne.n	80037ac <HAL_RCC_OscConfig+0x4d8>
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037aa:	e024      	b.n	80037f6 <HAL_RCC_OscConfig+0x522>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d110      	bne.n	80037d6 <HAL_RCC_OscConfig+0x502>
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	4a20      	ldr	r2, [pc, #128]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d4:	e00f      	b.n	80037f6 <HAL_RCC_OscConfig+0x522>
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037ee:	f023 0304 	bic.w	r3, r3, #4
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe f867 	bl	80018d0 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe f863 	bl	80018d0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e176      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ed      	beq.n	8003806 <HAL_RCC_OscConfig+0x532>
 800382a:	e01a      	b.n	8003862 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe f850 	bl	80018d0 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003832:	e00f      	b.n	8003854 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe f84c 	bl	80018d0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d906      	bls.n	8003854 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e15f      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003854:	4baa      	ldr	r3, [pc, #680]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e8      	bne.n	8003834 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003862:	7ffb      	ldrb	r3, [r7, #31]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4ba5      	ldr	r3, [pc, #660]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	4aa4      	ldr	r2, [pc, #656]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003872:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d03c      	beq.n	80038fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003888:	4b9d      	ldr	r3, [pc, #628]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 800388a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388e:	4a9c      	ldr	r2, [pc, #624]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe f81a 	bl	80018d0 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a0:	f7fe f816 	bl	80018d0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e12b      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b2:	4b93      	ldr	r3, [pc, #588]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 80038b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <HAL_RCC_OscConfig+0x5cc>
 80038c0:	e01b      	b.n	80038fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c2:	4b8f      	ldr	r3, [pc, #572]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 80038c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c8:	4a8d      	ldr	r2, [pc, #564]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7fd fffd 	bl	80018d0 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038da:	f7fd fff9 	bl	80018d0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e10e      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ec:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 80038ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ef      	bne.n	80038da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8102 	beq.w	8003b08 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	2b02      	cmp	r3, #2
 800390a:	f040 80c5 	bne.w	8003a98 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800390e:	4b7c      	ldr	r3, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	429a      	cmp	r2, r3
 8003920:	d12c      	bne.n	800397c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	3b01      	subs	r3, #1
 800392e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d123      	bne.n	800397c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d11b      	bne.n	800397c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d113      	bne.n	800397c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	3b01      	subs	r3, #1
 8003962:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d109      	bne.n	800397c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	3b01      	subs	r3, #1
 8003976:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d067      	beq.n	8003a4c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d062      	beq.n	8003a48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0bb      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003992:	4b5b      	ldr	r3, [pc, #364]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5a      	ldr	r2, [pc, #360]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800399e:	f7fd ff97 	bl	80018d0 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fd ff93 	bl	80018d0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0a8      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b8:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c4:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x830>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d4:	3a01      	subs	r2, #1
 80039d6:	0112      	lsls	r2, r2, #4
 80039d8:	4311      	orrs	r1, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039de:	0212      	lsls	r2, r2, #8
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039e6:	0852      	lsrs	r2, r2, #1
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0552      	lsls	r2, r2, #21
 80039ec:	4311      	orrs	r1, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039f2:	0852      	lsrs	r2, r2, #1
 80039f4:	3a01      	subs	r2, #1
 80039f6:	0652      	lsls	r2, r2, #25
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039fe:	06d2      	lsls	r2, r2, #27
 8003a00:	430a      	orrs	r2, r1
 8003a02:	493f      	ldr	r1, [pc, #252]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a08:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3c      	ldr	r2, [pc, #240]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a20:	f7fd ff56 	bl	80018d0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fd ff52 	bl	80018d0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e067      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a46:	e05f      	b.n	8003b08 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e05e      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a4c:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d157      	bne.n	8003b08 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a58:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a64:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a25      	ldr	r2, [pc, #148]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a70:	f7fd ff2e 	bl	80018d0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd ff2a 	bl	80018d0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e03f      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x7a4>
 8003a96:	e037      	b.n	8003b08 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d02d      	beq.n	8003afa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003abc:	f023 0303 	bic.w	r3, r3, #3
 8003ac0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003ac8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fefd 	bl	80018d0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd fef9 	bl	80018d0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e00e      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCC_OscConfig+0x82c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x806>
 8003af8:	e006      	b.n	8003b08 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e005      	b.n	8003b0a <HAL_RCC_OscConfig+0x836>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0c8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b66      	ldr	r3, [pc, #408]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4961      	ldr	r1, [pc, #388]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d04c      	beq.n	8003bfe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6c:	4b56      	ldr	r3, [pc, #344]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d121      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e09e      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d115      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e092      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b9c:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e086      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bac:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e07e      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bbc:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 0203 	bic.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	493f      	ldr	r1, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bce:	f7fd fe7f 	bl	80018d0 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd6:	f7fd fe7b 	bl	80018d0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e066      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bec:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 020c 	and.w	r2, r3, #12
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d1eb      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	492c      	ldr	r1, [pc, #176]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d210      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 0207 	bic.w	r2, r3, #7
 8003c32:	4924      	ldr	r1, [pc, #144]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e036      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4918      	ldr	r1, [pc, #96]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4910      	ldr	r1, [pc, #64]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c8a:	f000 f825 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	490c      	ldr	r1, [pc, #48]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd fdbe 	bl	8001830 <HAL_InitTick>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08006648 	.word	0x08006648
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	; 0x24
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce6:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d11e      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d0c:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e005      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	e004      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_RCC_GetSysClockFreq+0x114>)
 8003d5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d134      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0xac>
 8003d7c:	e005      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d80:	617b      	str	r3, [r7, #20]
      break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_GetSysClockFreq+0x114>)
 8003d86:	617b      	str	r3, [r7, #20]
      break;
 8003d88:	e002      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	617b      	str	r3, [r7, #20]
      break;
 8003d8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	fb02 f203 	mul.w	r2, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	0e5b      	lsrs	r3, r3, #25
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	08006660 	.word	0x08006660
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08006658 	.word	0x08006658

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e38:	f7ff ffda 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0adb      	lsrs	r3, r3, #11
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4904      	ldr	r1, [pc, #16]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08006658 	.word	0x08006658

08003e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e78:	f7ff f9c8 	bl	800320c <HAL_PWREx_GetVoltageRange>
 8003e7c:	6178      	str	r0, [r7, #20]
 8003e7e:	e014      	b.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8c:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e98:	f7ff f9b8 	bl	800320c <HAL_PWREx_GetVoltageRange>
 8003e9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb0:	d10b      	bne.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d919      	bls.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2ba0      	cmp	r3, #160	; 0xa0
 8003ebc:	d902      	bls.n	8003ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e013      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e010      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d902      	bls.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e00a      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d102      	bne.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003edc:	2302      	movs	r3, #2
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e004      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d101      	bne.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ee8:	2301      	movs	r3, #1
 8003eea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 0207 	bic.w	r2, r3, #7
 8003ef4:	4909      	ldr	r1, [pc, #36]	; (8003f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40022000 	.word	0x40022000

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d031      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f44:	d01a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f4a:	d814      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f54:	d10f      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f56:	4bac      	ldr	r3, [pc, #688]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4aab      	ldr	r2, [pc, #684]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f62:	e00c      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f9dc 	bl	8004328 <RCCEx_PLLSAI1_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	74fb      	strb	r3, [r7, #19]
      break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f84:	4ba0      	ldr	r3, [pc, #640]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	499d      	ldr	r1, [pc, #628]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8099 	beq.w	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fb2:	4b95      	ldr	r3, [pc, #596]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b8f      	ldr	r3, [pc, #572]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	4a8e      	ldr	r2, [pc, #568]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd4:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe4:	4b89      	ldr	r3, [pc, #548]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a88      	ldr	r2, [pc, #544]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd fc6e 	bl	80018d0 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ff6:	e009      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fd fc6a 	bl	80018d0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d902      	bls.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	74fb      	strb	r3, [r7, #19]
        break;
 800400a:	e005      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800400c:	4b7f      	ldr	r3, [pc, #508]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ef      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d155      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800401e:	4b7a      	ldr	r3, [pc, #488]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004028:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	429a      	cmp	r2, r3
 8004038:	d019      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800404e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004056:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004066:	4a68      	ldr	r2, [pc, #416]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d016      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fc2a 	bl	80018d0 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407e:	e00b      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd fc26 	bl	80018d0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d902      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	74fb      	strb	r3, [r7, #19]
            break;
 8004096:	e006      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004098:	4b5b      	ldr	r3, [pc, #364]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ec      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ac:	4b56      	ldr	r3, [pc, #344]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ba:	4953      	ldr	r1, [pc, #332]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	74bb      	strb	r3, [r7, #18]
 80040c8:	e001      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ce:	7c7b      	ldrb	r3, [r7, #17]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d105      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	4a4b      	ldr	r2, [pc, #300]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ec:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4943      	ldr	r1, [pc, #268]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800410e:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f023 020c 	bic.w	r2, r3, #12
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	493a      	ldr	r1, [pc, #232]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	4932      	ldr	r1, [pc, #200]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	4921      	ldr	r1, [pc, #132]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	4918      	ldr	r1, [pc, #96]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4910      	ldr	r1, [pc, #64]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d02c      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	4907      	ldr	r1, [pc, #28]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f8:	d10a      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fa:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a02      	ldr	r2, [pc, #8]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004204:	60d3      	str	r3, [r2, #12]
 8004206:	e015      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f881 	bl	8004328 <RCCEx_PLLSAI1_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d028      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004240:	4b30      	ldr	r3, [pc, #192]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	492d      	ldr	r1, [pc, #180]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425e:	d106      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004260:	4b28      	ldr	r3, [pc, #160]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800426a:	60d3      	str	r3, [r2, #12]
 800426c:	e011      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004276:	d10c      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f852 	bl	8004328 <RCCEx_PLLSAI1_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01c      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	4915      	ldr	r1, [pc, #84]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f82f 	bl	8004328 <RCCEx_PLLSAI1_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	4904      	ldr	r1, [pc, #16]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004312:	f043 0304 	orr.w	r3, r3, #4
 8004316:	6013      	str	r3, [r2, #0]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004336:	4b74      	ldr	r3, [pc, #464]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d018      	beq.n	8004374 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004342:	4b71      	ldr	r3, [pc, #452]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0203 	and.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d10d      	bne.n	800436e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
       ||
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800435a:	4b6b      	ldr	r3, [pc, #428]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
       ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d047      	beq.n	80043fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e044      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d018      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0x86>
 800437c:	2b03      	cmp	r3, #3
 800437e:	d825      	bhi.n	80043cc <RCCEx_PLLSAI1_Config+0xa4>
 8004380:	2b01      	cmp	r3, #1
 8004382:	d002      	beq.n	800438a <RCCEx_PLLSAI1_Config+0x62>
 8004384:	2b02      	cmp	r3, #2
 8004386:	d009      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x74>
 8004388:	e020      	b.n	80043cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800438a:	4b5f      	ldr	r3, [pc, #380]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11d      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e01a      	b.n	80043d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800439c:	4b5a      	ldr	r3, [pc, #360]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ac:	e013      	b.n	80043d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ae:	4b56      	ldr	r3, [pc, #344]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ba:	4b53      	ldr	r3, [pc, #332]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ca:	e006      	b.n	80043da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e004      	b.n	80043dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043da:	bf00      	nop
    }

    if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	430b      	orrs	r3, r1
 80043f8:	4943      	ldr	r1, [pc, #268]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d17c      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004404:	4b40      	ldr	r3, [pc, #256]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800440a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800440e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fd fa5e 	bl	80018d0 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004416:	e009      	b.n	800442c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004418:	f7fd fa5a 	bl	80018d0 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d902      	bls.n	800442c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	73fb      	strb	r3, [r7, #15]
        break;
 800442a:	e005      	b.n	8004438 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ef      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d15f      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d110      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004444:	4b30      	ldr	r3, [pc, #192]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800444c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68d2      	ldr	r2, [r2, #12]
 800445a:	06d2      	lsls	r2, r2, #27
 800445c:	430a      	orrs	r2, r1
 800445e:	492a      	ldr	r1, [pc, #168]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
 8004464:	e027      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d112      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	0211      	lsls	r1, r2, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6912      	ldr	r2, [r2, #16]
 8004482:	0852      	lsrs	r2, r2, #1
 8004484:	3a01      	subs	r2, #1
 8004486:	0552      	lsls	r2, r2, #21
 8004488:	430a      	orrs	r2, r1
 800448a:	491f      	ldr	r1, [pc, #124]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	610b      	str	r3, [r1, #16]
 8004490:	e011      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800449a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6892      	ldr	r2, [r2, #8]
 80044a2:	0211      	lsls	r1, r2, #8
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6952      	ldr	r2, [r2, #20]
 80044a8:	0852      	lsrs	r2, r2, #1
 80044aa:	3a01      	subs	r2, #1
 80044ac:	0652      	lsls	r2, r2, #25
 80044ae:	430a      	orrs	r2, r1
 80044b0:	4915      	ldr	r1, [pc, #84]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd fa05 	bl	80018d0 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044c8:	e009      	b.n	80044de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ca:	f7fd fa01 	bl	80018d0 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d902      	bls.n	80044de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	73fb      	strb	r3, [r7, #15]
          break;
 80044dc:	e005      	b.n	80044ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0ef      	beq.n	80044ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e049      	b.n	80045b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd f818 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fa98 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e03b      	b.n	800464c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a19      	ldr	r2, [pc, #100]	; (8004658 <HAL_TIM_Base_Start_IT+0x9c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_TIM_Base_Start_IT+0x4e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d004      	beq.n	800460a <HAL_TIM_Base_Start_IT+0x4e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <HAL_TIM_Base_Start_IT+0xa0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d115      	bne.n	8004636 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_TIM_Base_Start_IT+0xa4>)
 8004612:	4013      	ands	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d015      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x8c>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004622:	d011      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	e008      	b.n	8004648 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e000      	b.n	800464a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40014000 	.word	0x40014000
 8004660:	00010007 	.word	0x00010007

08004664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0202 	mvn.w	r2, #2
 8004690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9cb 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f9bd 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f9ce 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d122      	bne.n	8004714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d11b      	bne.n	8004714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0204 	mvn.w	r2, #4
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9a1 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f993 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f9a4 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b08      	cmp	r3, #8
 8004720:	d122      	bne.n	8004768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b08      	cmp	r3, #8
 800472e:	d11b      	bne.n	8004768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0208 	mvn.w	r2, #8
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2204      	movs	r2, #4
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f977 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f969 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f97a 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	d122      	bne.n	80047bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d11b      	bne.n	80047bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0210 	mvn.w	r2, #16
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2208      	movs	r2, #8
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f94d 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f93f 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f950 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10e      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0201 	mvn.w	r2, #1
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fc fc2c 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d10e      	bne.n	8004814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b80      	cmp	r3, #128	; 0x80
 8004802:	d107      	bne.n	8004814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 faa4 	bl	8004d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d10e      	bne.n	8004842 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d107      	bne.n	8004842 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fa97 	bl	8004d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d10e      	bne.n	800486e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d107      	bne.n	800486e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8fe 	bl	8004a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b20      	cmp	r3, #32
 800487a:	d10e      	bne.n	800489a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b20      	cmp	r3, #32
 8004888:	d107      	bne.n	800489a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0220 	mvn.w	r2, #32
 8004892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fa57 	bl	8004d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_ConfigClockSource+0x18>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0b5      	b.n	8004a26 <HAL_TIM_ConfigClockSource+0x184>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f6:	d03e      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0xd4>
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	f200 8087 	bhi.w	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004904:	f000 8085 	beq.w	8004a12 <HAL_TIM_ConfigClockSource+0x170>
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d87f      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 800490e:	2b70      	cmp	r3, #112	; 0x70
 8004910:	d01a      	beq.n	8004948 <HAL_TIM_ConfigClockSource+0xa6>
 8004912:	2b70      	cmp	r3, #112	; 0x70
 8004914:	d87b      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 8004916:	2b60      	cmp	r3, #96	; 0x60
 8004918:	d050      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0x11a>
 800491a:	2b60      	cmp	r3, #96	; 0x60
 800491c:	d877      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 800491e:	2b50      	cmp	r3, #80	; 0x50
 8004920:	d03c      	beq.n	800499c <HAL_TIM_ConfigClockSource+0xfa>
 8004922:	2b50      	cmp	r3, #80	; 0x50
 8004924:	d873      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d058      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0x13a>
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d86f      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d064      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0x15a>
 8004932:	2b30      	cmp	r3, #48	; 0x30
 8004934:	d86b      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 8004936:	2b20      	cmp	r3, #32
 8004938:	d060      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0x15a>
 800493a:	2b20      	cmp	r3, #32
 800493c:	d867      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d05c      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0x15a>
 8004942:	2b10      	cmp	r3, #16
 8004944:	d05a      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004946:	e062      	b.n	8004a0e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	6899      	ldr	r1, [r3, #8]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f000 f970 	bl	8004c3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800496a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	609a      	str	r2, [r3, #8]
      break;
 8004974:	e04e      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6899      	ldr	r1, [r3, #8]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f000 f959 	bl	8004c3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004998:	609a      	str	r2, [r3, #8]
      break;
 800499a:	e03b      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f000 f8cd 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2150      	movs	r1, #80	; 0x50
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f926 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 80049ba:	e02b      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f000 f8ec 	bl	8004ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2160      	movs	r1, #96	; 0x60
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f916 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 80049da:	e01b      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	461a      	mov	r2, r3
 80049ea:	f000 f8ad 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f906 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 80049fa:	e00b      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 f8fd 	bl	8004c06 <TIM_ITRx_SetConfig>
        break;
 8004a0c:	e002      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <TIM_Base_SetConfig+0xbc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0x20>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9e:	d108      	bne.n	8004ab2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <TIM_Base_SetConfig+0xbc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <TIM_Base_SetConfig+0x52>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d007      	beq.n	8004ad2 <TIM_Base_SetConfig+0x52>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <TIM_Base_SetConfig+0xc0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_Base_SetConfig+0x52>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <TIM_Base_SetConfig+0xc4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d108      	bne.n	8004ae4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <TIM_Base_SetConfig+0xbc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0xa0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <TIM_Base_SetConfig+0xc0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0xa0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <TIM_Base_SetConfig+0xc4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d103      	bne.n	8004b28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	615a      	str	r2, [r3, #20]
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400

08004b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	031b      	lsls	r3, r3, #12
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f043 0307 	orr.w	r3, r3, #7
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e04f      	b.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d004      	beq.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10c      	bne.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40014000 	.word	0x40014000

08004d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e040      	b.n	8004e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc fc04 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8c0 	bl	8004f48 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fac0 	bl	8005360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fb47 	bl	80054a4 <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	f040 8082 	bne.w	8004f3e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_UART_Transmit+0x26>
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07a      	b.n	8004f40 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Transmit+0x38>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e073      	b.n	8004f40 <HAL_UART_Transmit+0x120>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	; 0x21
 8004e6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6e:	f7fc fd2f 	bl	80018d0 <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8c:	d108      	bne.n	8004ea0 <HAL_UART_Transmit+0x80>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e003      	b.n	8004ea8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004eb0:	e02d      	b.n	8004f0e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fb3a 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e039      	b.n	8004f40 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e008      	b.n	8004efc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1cb      	bne.n	8004eb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2140      	movs	r1, #64	; 0x40
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fb06 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e005      	b.n	8004f40 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e000      	b.n	8004f40 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f3e:	2302      	movs	r3, #2
  }
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f48:	b5b0      	push	{r4, r5, r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4baf      	ldr	r3, [pc, #700]	; (8005230 <UART_SetConfig+0x2e8>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	69f9      	ldr	r1, [r7, #28]
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4aa4      	ldr	r2, [pc, #656]	; (8005234 <UART_SetConfig+0x2ec>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a9b      	ldr	r2, [pc, #620]	; (8005238 <UART_SetConfig+0x2f0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d121      	bne.n	8005012 <UART_SetConfig+0xca>
 8004fce:	4b9b      	ldr	r3, [pc, #620]	; (800523c <UART_SetConfig+0x2f4>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d817      	bhi.n	800500c <UART_SetConfig+0xc4>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0x9c>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08004ffb 	.word	0x08004ffb
 8004ff0:	08005007 	.word	0x08005007
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	76fb      	strb	r3, [r7, #27]
 8004ff8:	e070      	b.n	80050dc <UART_SetConfig+0x194>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	76fb      	strb	r3, [r7, #27]
 8004ffe:	e06d      	b.n	80050dc <UART_SetConfig+0x194>
 8005000:	2304      	movs	r3, #4
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e06a      	b.n	80050dc <UART_SetConfig+0x194>
 8005006:	2308      	movs	r3, #8
 8005008:	76fb      	strb	r3, [r7, #27]
 800500a:	e067      	b.n	80050dc <UART_SetConfig+0x194>
 800500c:	2310      	movs	r3, #16
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e064      	b.n	80050dc <UART_SetConfig+0x194>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a8a      	ldr	r2, [pc, #552]	; (8005240 <UART_SetConfig+0x2f8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d132      	bne.n	8005082 <UART_SetConfig+0x13a>
 800501c:	4b87      	ldr	r3, [pc, #540]	; (800523c <UART_SetConfig+0x2f4>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d828      	bhi.n	800507c <UART_SetConfig+0x134>
 800502a:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0xe8>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005065 	.word	0x08005065
 8005034:	0800507d 	.word	0x0800507d
 8005038:	0800507d 	.word	0x0800507d
 800503c:	0800507d 	.word	0x0800507d
 8005040:	08005071 	.word	0x08005071
 8005044:	0800507d 	.word	0x0800507d
 8005048:	0800507d 	.word	0x0800507d
 800504c:	0800507d 	.word	0x0800507d
 8005050:	0800506b 	.word	0x0800506b
 8005054:	0800507d 	.word	0x0800507d
 8005058:	0800507d 	.word	0x0800507d
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005077 	.word	0x08005077
 8005064:	2300      	movs	r3, #0
 8005066:	76fb      	strb	r3, [r7, #27]
 8005068:	e038      	b.n	80050dc <UART_SetConfig+0x194>
 800506a:	2302      	movs	r3, #2
 800506c:	76fb      	strb	r3, [r7, #27]
 800506e:	e035      	b.n	80050dc <UART_SetConfig+0x194>
 8005070:	2304      	movs	r3, #4
 8005072:	76fb      	strb	r3, [r7, #27]
 8005074:	e032      	b.n	80050dc <UART_SetConfig+0x194>
 8005076:	2308      	movs	r3, #8
 8005078:	76fb      	strb	r3, [r7, #27]
 800507a:	e02f      	b.n	80050dc <UART_SetConfig+0x194>
 800507c:	2310      	movs	r3, #16
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e02c      	b.n	80050dc <UART_SetConfig+0x194>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6b      	ldr	r2, [pc, #428]	; (8005234 <UART_SetConfig+0x2ec>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d125      	bne.n	80050d8 <UART_SetConfig+0x190>
 800508c:	4b6b      	ldr	r3, [pc, #428]	; (800523c <UART_SetConfig+0x2f4>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800509a:	d017      	beq.n	80050cc <UART_SetConfig+0x184>
 800509c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a0:	d817      	bhi.n	80050d2 <UART_SetConfig+0x18a>
 80050a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a6:	d00b      	beq.n	80050c0 <UART_SetConfig+0x178>
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d811      	bhi.n	80050d2 <UART_SetConfig+0x18a>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <UART_SetConfig+0x172>
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d006      	beq.n	80050c6 <UART_SetConfig+0x17e>
 80050b8:	e00b      	b.n	80050d2 <UART_SetConfig+0x18a>
 80050ba:	2300      	movs	r3, #0
 80050bc:	76fb      	strb	r3, [r7, #27]
 80050be:	e00d      	b.n	80050dc <UART_SetConfig+0x194>
 80050c0:	2302      	movs	r3, #2
 80050c2:	76fb      	strb	r3, [r7, #27]
 80050c4:	e00a      	b.n	80050dc <UART_SetConfig+0x194>
 80050c6:	2304      	movs	r3, #4
 80050c8:	76fb      	strb	r3, [r7, #27]
 80050ca:	e007      	b.n	80050dc <UART_SetConfig+0x194>
 80050cc:	2308      	movs	r3, #8
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e004      	b.n	80050dc <UART_SetConfig+0x194>
 80050d2:	2310      	movs	r3, #16
 80050d4:	76fb      	strb	r3, [r7, #27]
 80050d6:	e001      	b.n	80050dc <UART_SetConfig+0x194>
 80050d8:	2310      	movs	r3, #16
 80050da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a54      	ldr	r2, [pc, #336]	; (8005234 <UART_SetConfig+0x2ec>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d173      	bne.n	80051ce <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050e6:	7efb      	ldrb	r3, [r7, #27]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d824      	bhi.n	8005136 <UART_SetConfig+0x1ee>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x1ac>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005121 	.word	0x08005121
 8005100:	08005137 	.word	0x08005137
 8005104:	08005127 	.word	0x08005127
 8005108:	08005137 	.word	0x08005137
 800510c:	08005137 	.word	0x08005137
 8005110:	08005137 	.word	0x08005137
 8005114:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7fe fe76 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800511c:	6178      	str	r0, [r7, #20]
        break;
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b48      	ldr	r3, [pc, #288]	; (8005244 <UART_SetConfig+0x2fc>)
 8005122:	617b      	str	r3, [r7, #20]
        break;
 8005124:	e00c      	b.n	8005140 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fe fdd7 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 800512a:	6178      	str	r0, [r7, #20]
        break;
 800512c:	e008      	b.n	8005140 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005132:	617b      	str	r3, [r7, #20]
        break;
 8005134:	e004      	b.n	8005140 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	76bb      	strb	r3, [r7, #26]
        break;
 800513e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80fe 	beq.w	8005344 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	429a      	cmp	r2, r3
 8005156:	d305      	bcc.n	8005164 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	d902      	bls.n	800516a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	76bb      	strb	r3, [r7, #26]
 8005168:	e0ec      	b.n	8005344 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4618      	mov	r0, r3
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	020b      	lsls	r3, r1, #8
 800517c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005180:	0202      	lsls	r2, r0, #8
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	6849      	ldr	r1, [r1, #4]
 8005186:	0849      	lsrs	r1, r1, #1
 8005188:	4608      	mov	r0, r1
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	1814      	adds	r4, r2, r0
 8005190:	eb43 0501 	adc.w	r5, r3, r1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	461a      	mov	r2, r3
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7fb fcd9 	bl	8000b58 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4613      	mov	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d308      	bcc.n	80051c8 <UART_SetConfig+0x280>
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051bc:	d204      	bcs.n	80051c8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	e0bd      	b.n	8005344 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	76bb      	strb	r3, [r7, #26]
 80051cc:	e0ba      	b.n	8005344 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d6:	d168      	bne.n	80052aa <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80051d8:	7efb      	ldrb	r3, [r7, #27]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d834      	bhi.n	8005248 <UART_SetConfig+0x300>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x29c>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	08005249 	.word	0x08005249
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	08005249 	.word	0x08005249
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005249 	.word	0x08005249
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe fdfe 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800520c:	6178      	str	r0, [r7, #20]
        break;
 800520e:	e020      	b.n	8005252 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe fe10 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8005214:	6178      	str	r0, [r7, #20]
        break;
 8005216:	e01c      	b.n	8005252 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <UART_SetConfig+0x2fc>)
 800521a:	617b      	str	r3, [r7, #20]
        break;
 800521c:	e019      	b.n	8005252 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe fd5b 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8005222:	6178      	str	r0, [r7, #20]
        break;
 8005224:	e015      	b.n	8005252 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	617b      	str	r3, [r7, #20]
        break;
 800522c:	e011      	b.n	8005252 <UART_SetConfig+0x30a>
 800522e:	bf00      	nop
 8005230:	efff69f3 	.word	0xefff69f3
 8005234:	40008000 	.word	0x40008000
 8005238:	40013800 	.word	0x40013800
 800523c:	40021000 	.word	0x40021000
 8005240:	40004400 	.word	0x40004400
 8005244:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	76bb      	strb	r3, [r7, #26]
        break;
 8005250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d075      	beq.n	8005344 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	005a      	lsls	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	441a      	add	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	b29b      	uxth	r3, r3
 800526e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b0f      	cmp	r3, #15
 8005274:	d916      	bls.n	80052a4 <UART_SetConfig+0x35c>
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	d212      	bcs.n	80052a4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	b29b      	uxth	r3, r3
 8005282:	f023 030f 	bic.w	r3, r3, #15
 8005286:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	b29b      	uxth	r3, r3
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	b29a      	uxth	r2, r3
 8005294:	89fb      	ldrh	r3, [r7, #14]
 8005296:	4313      	orrs	r3, r2
 8005298:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	89fa      	ldrh	r2, [r7, #14]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	e04f      	b.n	8005344 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	76bb      	strb	r3, [r7, #26]
 80052a8:	e04c      	b.n	8005344 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052aa:	7efb      	ldrb	r3, [r7, #27]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d828      	bhi.n	8005302 <UART_SetConfig+0x3ba>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x370>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	08005303 	.word	0x08005303
 80052c8:	080052f3 	.word	0x080052f3
 80052cc:	08005303 	.word	0x08005303
 80052d0:	08005303 	.word	0x08005303
 80052d4:	08005303 	.word	0x08005303
 80052d8:	080052fb 	.word	0x080052fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7fe fd94 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 80052e0:	6178      	str	r0, [r7, #20]
        break;
 80052e2:	e013      	b.n	800530c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e4:	f7fe fda6 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 80052e8:	6178      	str	r0, [r7, #20]
        break;
 80052ea:	e00f      	b.n	800530c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <UART_SetConfig+0x414>)
 80052ee:	617b      	str	r3, [r7, #20]
        break;
 80052f0:	e00c      	b.n	800530c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f2:	f7fe fcf1 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 80052f6:	6178      	str	r0, [r7, #20]
        break;
 80052f8:	e008      	b.n	800530c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fe:	617b      	str	r3, [r7, #20]
        break;
 8005300:	e004      	b.n	800530c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	76bb      	strb	r3, [r7, #26]
        break;
 800530a:	bf00      	nop
    }

    if (pclk != 0U)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d018      	beq.n	8005344 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	085a      	lsrs	r2, r3, #1
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	441a      	add	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	b29b      	uxth	r3, r3
 8005326:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	d908      	bls.n	8005340 <UART_SetConfig+0x3f8>
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005334:	d204      	bcs.n	8005340 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	60da      	str	r2, [r3, #12]
 800533e:	e001      	b.n	8005344 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005350:	7ebb      	ldrb	r3, [r7, #26]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
 800535a:	bf00      	nop
 800535c:	00f42400 	.word	0x00f42400

08005360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01a      	beq.n	8005476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545e:	d10a      	bne.n	8005476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b4:	f7fc fa0c 	bl	80018d0 <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10e      	bne.n	80054e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f82d 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e023      	b.n	800552e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d10e      	bne.n	8005512 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f817 	bl	8005536 <UART_WaitOnFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00d      	b.n	800552e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	e05e      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800554e:	d05a      	beq.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005550:	f7fc f9be 	bl	80018d0 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <UART_WaitOnFlagUntilTimeout+0x30>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11b      	bne.n	800559e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005574:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e043      	b.n	8005626 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02c      	beq.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ba:	d124      	bne.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055c4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055d4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e00f      	b.n	8005626 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4013      	ands	r3, r2
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	429a      	cmp	r2, r3
 8005614:	bf0c      	ite	eq
 8005616:	2301      	moveq	r3, #1
 8005618:	2300      	movne	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	429a      	cmp	r2, r3
 8005622:	d091      	beq.n	8005548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <__errno>:
 8005630:	4b01      	ldr	r3, [pc, #4]	; (8005638 <__errno+0x8>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	2000000c 	.word	0x2000000c

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4d0d      	ldr	r5, [pc, #52]	; (8005674 <__libc_init_array+0x38>)
 8005640:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005642:	1b64      	subs	r4, r4, r5
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	2600      	movs	r6, #0
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	4d0b      	ldr	r5, [pc, #44]	; (800567c <__libc_init_array+0x40>)
 800564e:	4c0c      	ldr	r4, [pc, #48]	; (8005680 <__libc_init_array+0x44>)
 8005650:	f000 ffd4 	bl	80065fc <_init>
 8005654:	1b64      	subs	r4, r4, r5
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	2600      	movs	r6, #0
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	080066e0 	.word	0x080066e0
 8005678:	080066e0 	.word	0x080066e0
 800567c:	080066e0 	.word	0x080066e0
 8005680:	080066e4 	.word	0x080066e4

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <pow>:
 8005694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005698:	ec59 8b10 	vmov	r8, r9, d0
 800569c:	ec57 6b11 	vmov	r6, r7, d1
 80056a0:	f000 f8a6 	bl	80057f0 <__ieee754_pow>
 80056a4:	4b4e      	ldr	r3, [pc, #312]	; (80057e0 <pow+0x14c>)
 80056a6:	f993 3000 	ldrsb.w	r3, [r3]
 80056aa:	3301      	adds	r3, #1
 80056ac:	ec55 4b10 	vmov	r4, r5, d0
 80056b0:	d015      	beq.n	80056de <pow+0x4a>
 80056b2:	4632      	mov	r2, r6
 80056b4:	463b      	mov	r3, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fb f9e7 	bl	8000a8c <__aeabi_dcmpun>
 80056be:	b970      	cbnz	r0, 80056de <pow+0x4a>
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	f7fb f9e0 	bl	8000a8c <__aeabi_dcmpun>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	b148      	cbz	r0, 80056e6 <pow+0x52>
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fb f9a7 	bl	8000a28 <__aeabi_dcmpeq>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d17d      	bne.n	80057da <pow+0x146>
 80056de:	ec45 4b10 	vmov	d0, r4, r5
 80056e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fb f99d 	bl	8000a28 <__aeabi_dcmpeq>
 80056ee:	b1e0      	cbz	r0, 800572a <pow+0x96>
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fb f996 	bl	8000a28 <__aeabi_dcmpeq>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d16c      	bne.n	80057da <pow+0x146>
 8005700:	ec47 6b10 	vmov	d0, r6, r7
 8005704:	f000 fe53 	bl	80063ae <finite>
 8005708:	2800      	cmp	r0, #0
 800570a:	d0e8      	beq.n	80056de <pow+0x4a>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f7fb f992 	bl	8000a3c <__aeabi_dcmplt>
 8005718:	2800      	cmp	r0, #0
 800571a:	d0e0      	beq.n	80056de <pow+0x4a>
 800571c:	f7ff ff88 	bl	8005630 <__errno>
 8005720:	2321      	movs	r3, #33	; 0x21
 8005722:	6003      	str	r3, [r0, #0]
 8005724:	2400      	movs	r4, #0
 8005726:	4d2f      	ldr	r5, [pc, #188]	; (80057e4 <pow+0x150>)
 8005728:	e7d9      	b.n	80056de <pow+0x4a>
 800572a:	ec45 4b10 	vmov	d0, r4, r5
 800572e:	f000 fe3e 	bl	80063ae <finite>
 8005732:	bbb8      	cbnz	r0, 80057a4 <pow+0x110>
 8005734:	ec49 8b10 	vmov	d0, r8, r9
 8005738:	f000 fe39 	bl	80063ae <finite>
 800573c:	b390      	cbz	r0, 80057a4 <pow+0x110>
 800573e:	ec47 6b10 	vmov	d0, r6, r7
 8005742:	f000 fe34 	bl	80063ae <finite>
 8005746:	b368      	cbz	r0, 80057a4 <pow+0x110>
 8005748:	4622      	mov	r2, r4
 800574a:	462b      	mov	r3, r5
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fb f99c 	bl	8000a8c <__aeabi_dcmpun>
 8005754:	b160      	cbz	r0, 8005770 <pow+0xdc>
 8005756:	f7ff ff6b 	bl	8005630 <__errno>
 800575a:	2321      	movs	r3, #33	; 0x21
 800575c:	6003      	str	r3, [r0, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	2300      	movs	r3, #0
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	f7fb f821 	bl	80007ac <__aeabi_ddiv>
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	e7b6      	b.n	80056de <pow+0x4a>
 8005770:	f7ff ff5e 	bl	8005630 <__errno>
 8005774:	2322      	movs	r3, #34	; 0x22
 8005776:	6003      	str	r3, [r0, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	4640      	mov	r0, r8
 800577e:	4649      	mov	r1, r9
 8005780:	f7fb f95c 	bl	8000a3c <__aeabi_dcmplt>
 8005784:	2400      	movs	r4, #0
 8005786:	b158      	cbz	r0, 80057a0 <pow+0x10c>
 8005788:	ec47 6b10 	vmov	d0, r6, r7
 800578c:	f000 fe24 	bl	80063d8 <rint>
 8005790:	4632      	mov	r2, r6
 8005792:	ec51 0b10 	vmov	r0, r1, d0
 8005796:	463b      	mov	r3, r7
 8005798:	f7fb f946 	bl	8000a28 <__aeabi_dcmpeq>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0c2      	beq.n	8005726 <pow+0x92>
 80057a0:	4d11      	ldr	r5, [pc, #68]	; (80057e8 <pow+0x154>)
 80057a2:	e79c      	b.n	80056de <pow+0x4a>
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fb f93c 	bl	8000a28 <__aeabi_dcmpeq>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d094      	beq.n	80056de <pow+0x4a>
 80057b4:	ec49 8b10 	vmov	d0, r8, r9
 80057b8:	f000 fdf9 	bl	80063ae <finite>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d08e      	beq.n	80056de <pow+0x4a>
 80057c0:	ec47 6b10 	vmov	d0, r6, r7
 80057c4:	f000 fdf3 	bl	80063ae <finite>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d088      	beq.n	80056de <pow+0x4a>
 80057cc:	f7ff ff30 	bl	8005630 <__errno>
 80057d0:	2322      	movs	r3, #34	; 0x22
 80057d2:	6003      	str	r3, [r0, #0]
 80057d4:	2400      	movs	r4, #0
 80057d6:	2500      	movs	r5, #0
 80057d8:	e781      	b.n	80056de <pow+0x4a>
 80057da:	4d04      	ldr	r5, [pc, #16]	; (80057ec <pow+0x158>)
 80057dc:	2400      	movs	r4, #0
 80057de:	e77e      	b.n	80056de <pow+0x4a>
 80057e0:	20000070 	.word	0x20000070
 80057e4:	fff00000 	.word	0xfff00000
 80057e8:	7ff00000 	.word	0x7ff00000
 80057ec:	3ff00000 	.word	0x3ff00000

080057f0 <__ieee754_pow>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	ed2d 8b06 	vpush	{d8-d10}
 80057f8:	b08d      	sub	sp, #52	; 0x34
 80057fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80057fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005802:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005806:	ea56 0100 	orrs.w	r1, r6, r0
 800580a:	ec53 2b10 	vmov	r2, r3, d0
 800580e:	f000 84d1 	beq.w	80061b4 <__ieee754_pow+0x9c4>
 8005812:	497f      	ldr	r1, [pc, #508]	; (8005a10 <__ieee754_pow+0x220>)
 8005814:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005818:	428c      	cmp	r4, r1
 800581a:	ee10 8a10 	vmov	r8, s0
 800581e:	4699      	mov	r9, r3
 8005820:	dc09      	bgt.n	8005836 <__ieee754_pow+0x46>
 8005822:	d103      	bne.n	800582c <__ieee754_pow+0x3c>
 8005824:	b97a      	cbnz	r2, 8005846 <__ieee754_pow+0x56>
 8005826:	42a6      	cmp	r6, r4
 8005828:	dd02      	ble.n	8005830 <__ieee754_pow+0x40>
 800582a:	e00c      	b.n	8005846 <__ieee754_pow+0x56>
 800582c:	428e      	cmp	r6, r1
 800582e:	dc02      	bgt.n	8005836 <__ieee754_pow+0x46>
 8005830:	428e      	cmp	r6, r1
 8005832:	d110      	bne.n	8005856 <__ieee754_pow+0x66>
 8005834:	b178      	cbz	r0, 8005856 <__ieee754_pow+0x66>
 8005836:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800583a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800583e:	ea54 0308 	orrs.w	r3, r4, r8
 8005842:	f000 84b7 	beq.w	80061b4 <__ieee754_pow+0x9c4>
 8005846:	4873      	ldr	r0, [pc, #460]	; (8005a14 <__ieee754_pow+0x224>)
 8005848:	b00d      	add	sp, #52	; 0x34
 800584a:	ecbd 8b06 	vpop	{d8-d10}
 800584e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005852:	f000 bdb9 	b.w	80063c8 <nan>
 8005856:	f1b9 0f00 	cmp.w	r9, #0
 800585a:	da36      	bge.n	80058ca <__ieee754_pow+0xda>
 800585c:	496e      	ldr	r1, [pc, #440]	; (8005a18 <__ieee754_pow+0x228>)
 800585e:	428e      	cmp	r6, r1
 8005860:	dc51      	bgt.n	8005906 <__ieee754_pow+0x116>
 8005862:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005866:	428e      	cmp	r6, r1
 8005868:	f340 84af 	ble.w	80061ca <__ieee754_pow+0x9da>
 800586c:	1531      	asrs	r1, r6, #20
 800586e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005872:	2914      	cmp	r1, #20
 8005874:	dd0f      	ble.n	8005896 <__ieee754_pow+0xa6>
 8005876:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800587a:	fa20 fc01 	lsr.w	ip, r0, r1
 800587e:	fa0c f101 	lsl.w	r1, ip, r1
 8005882:	4281      	cmp	r1, r0
 8005884:	f040 84a1 	bne.w	80061ca <__ieee754_pow+0x9da>
 8005888:	f00c 0c01 	and.w	ip, ip, #1
 800588c:	f1cc 0102 	rsb	r1, ip, #2
 8005890:	9100      	str	r1, [sp, #0]
 8005892:	b180      	cbz	r0, 80058b6 <__ieee754_pow+0xc6>
 8005894:	e059      	b.n	800594a <__ieee754_pow+0x15a>
 8005896:	2800      	cmp	r0, #0
 8005898:	d155      	bne.n	8005946 <__ieee754_pow+0x156>
 800589a:	f1c1 0114 	rsb	r1, r1, #20
 800589e:	fa46 fc01 	asr.w	ip, r6, r1
 80058a2:	fa0c f101 	lsl.w	r1, ip, r1
 80058a6:	42b1      	cmp	r1, r6
 80058a8:	f040 848c 	bne.w	80061c4 <__ieee754_pow+0x9d4>
 80058ac:	f00c 0c01 	and.w	ip, ip, #1
 80058b0:	f1cc 0102 	rsb	r1, ip, #2
 80058b4:	9100      	str	r1, [sp, #0]
 80058b6:	4959      	ldr	r1, [pc, #356]	; (8005a1c <__ieee754_pow+0x22c>)
 80058b8:	428e      	cmp	r6, r1
 80058ba:	d12d      	bne.n	8005918 <__ieee754_pow+0x128>
 80058bc:	2f00      	cmp	r7, #0
 80058be:	da79      	bge.n	80059b4 <__ieee754_pow+0x1c4>
 80058c0:	4956      	ldr	r1, [pc, #344]	; (8005a1c <__ieee754_pow+0x22c>)
 80058c2:	2000      	movs	r0, #0
 80058c4:	f7fa ff72 	bl	80007ac <__aeabi_ddiv>
 80058c8:	e016      	b.n	80058f8 <__ieee754_pow+0x108>
 80058ca:	2100      	movs	r1, #0
 80058cc:	9100      	str	r1, [sp, #0]
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d13b      	bne.n	800594a <__ieee754_pow+0x15a>
 80058d2:	494f      	ldr	r1, [pc, #316]	; (8005a10 <__ieee754_pow+0x220>)
 80058d4:	428e      	cmp	r6, r1
 80058d6:	d1ee      	bne.n	80058b6 <__ieee754_pow+0xc6>
 80058d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80058dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80058e0:	ea53 0308 	orrs.w	r3, r3, r8
 80058e4:	f000 8466 	beq.w	80061b4 <__ieee754_pow+0x9c4>
 80058e8:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <__ieee754_pow+0x230>)
 80058ea:	429c      	cmp	r4, r3
 80058ec:	dd0d      	ble.n	800590a <__ieee754_pow+0x11a>
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	f280 8464 	bge.w	80061bc <__ieee754_pow+0x9cc>
 80058f4:	2000      	movs	r0, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	ec41 0b10 	vmov	d0, r0, r1
 80058fc:	b00d      	add	sp, #52	; 0x34
 80058fe:	ecbd 8b06 	vpop	{d8-d10}
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	2102      	movs	r1, #2
 8005908:	e7e0      	b.n	80058cc <__ieee754_pow+0xdc>
 800590a:	2f00      	cmp	r7, #0
 800590c:	daf2      	bge.n	80058f4 <__ieee754_pow+0x104>
 800590e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005912:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005916:	e7ef      	b.n	80058f8 <__ieee754_pow+0x108>
 8005918:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800591c:	d104      	bne.n	8005928 <__ieee754_pow+0x138>
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	f7fa fe19 	bl	8000558 <__aeabi_dmul>
 8005926:	e7e7      	b.n	80058f8 <__ieee754_pow+0x108>
 8005928:	493e      	ldr	r1, [pc, #248]	; (8005a24 <__ieee754_pow+0x234>)
 800592a:	428f      	cmp	r7, r1
 800592c:	d10d      	bne.n	800594a <__ieee754_pow+0x15a>
 800592e:	f1b9 0f00 	cmp.w	r9, #0
 8005932:	db0a      	blt.n	800594a <__ieee754_pow+0x15a>
 8005934:	ec43 2b10 	vmov	d0, r2, r3
 8005938:	b00d      	add	sp, #52	; 0x34
 800593a:	ecbd 8b06 	vpop	{d8-d10}
 800593e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005942:	f000 bc77 	b.w	8006234 <__ieee754_sqrt>
 8005946:	2100      	movs	r1, #0
 8005948:	9100      	str	r1, [sp, #0]
 800594a:	ec43 2b10 	vmov	d0, r2, r3
 800594e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005952:	f000 fd23 	bl	800639c <fabs>
 8005956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800595a:	ec51 0b10 	vmov	r0, r1, d0
 800595e:	f1b8 0f00 	cmp.w	r8, #0
 8005962:	d12a      	bne.n	80059ba <__ieee754_pow+0x1ca>
 8005964:	b12c      	cbz	r4, 8005972 <__ieee754_pow+0x182>
 8005966:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005a1c <__ieee754_pow+0x22c>
 800596a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800596e:	45e6      	cmp	lr, ip
 8005970:	d123      	bne.n	80059ba <__ieee754_pow+0x1ca>
 8005972:	2f00      	cmp	r7, #0
 8005974:	da05      	bge.n	8005982 <__ieee754_pow+0x192>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	2000      	movs	r0, #0
 800597c:	4927      	ldr	r1, [pc, #156]	; (8005a1c <__ieee754_pow+0x22c>)
 800597e:	f7fa ff15 	bl	80007ac <__aeabi_ddiv>
 8005982:	f1b9 0f00 	cmp.w	r9, #0
 8005986:	dab7      	bge.n	80058f8 <__ieee754_pow+0x108>
 8005988:	9b00      	ldr	r3, [sp, #0]
 800598a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800598e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005992:	4323      	orrs	r3, r4
 8005994:	d108      	bne.n	80059a8 <__ieee754_pow+0x1b8>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4610      	mov	r0, r2
 800599c:	4619      	mov	r1, r3
 800599e:	f7fa fc23 	bl	80001e8 <__aeabi_dsub>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	e78d      	b.n	80058c4 <__ieee754_pow+0xd4>
 80059a8:	9b00      	ldr	r3, [sp, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d1a4      	bne.n	80058f8 <__ieee754_pow+0x108>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059b4:	4610      	mov	r0, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	e79e      	b.n	80058f8 <__ieee754_pow+0x108>
 80059ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80059be:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80059c2:	950a      	str	r5, [sp, #40]	; 0x28
 80059c4:	9d00      	ldr	r5, [sp, #0]
 80059c6:	46ac      	mov	ip, r5
 80059c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80059ca:	ea5c 0505 	orrs.w	r5, ip, r5
 80059ce:	d0e4      	beq.n	800599a <__ieee754_pow+0x1aa>
 80059d0:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <__ieee754_pow+0x238>)
 80059d2:	429e      	cmp	r6, r3
 80059d4:	f340 80fc 	ble.w	8005bd0 <__ieee754_pow+0x3e0>
 80059d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80059dc:	429e      	cmp	r6, r3
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <__ieee754_pow+0x230>)
 80059e0:	dd07      	ble.n	80059f2 <__ieee754_pow+0x202>
 80059e2:	429c      	cmp	r4, r3
 80059e4:	dc0a      	bgt.n	80059fc <__ieee754_pow+0x20c>
 80059e6:	2f00      	cmp	r7, #0
 80059e8:	da84      	bge.n	80058f4 <__ieee754_pow+0x104>
 80059ea:	a307      	add	r3, pc, #28	; (adr r3, 8005a08 <__ieee754_pow+0x218>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	e795      	b.n	800591e <__ieee754_pow+0x12e>
 80059f2:	429c      	cmp	r4, r3
 80059f4:	dbf7      	blt.n	80059e6 <__ieee754_pow+0x1f6>
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <__ieee754_pow+0x22c>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	dd17      	ble.n	8005a2c <__ieee754_pow+0x23c>
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	dcf4      	bgt.n	80059ea <__ieee754_pow+0x1fa>
 8005a00:	e778      	b.n	80058f4 <__ieee754_pow+0x104>
 8005a02:	bf00      	nop
 8005a04:	f3af 8000 	nop.w
 8005a08:	8800759c 	.word	0x8800759c
 8005a0c:	7e37e43c 	.word	0x7e37e43c
 8005a10:	7ff00000 	.word	0x7ff00000
 8005a14:	08006690 	.word	0x08006690
 8005a18:	433fffff 	.word	0x433fffff
 8005a1c:	3ff00000 	.word	0x3ff00000
 8005a20:	3fefffff 	.word	0x3fefffff
 8005a24:	3fe00000 	.word	0x3fe00000
 8005a28:	41e00000 	.word	0x41e00000
 8005a2c:	4b64      	ldr	r3, [pc, #400]	; (8005bc0 <__ieee754_pow+0x3d0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f7fa fbda 	bl	80001e8 <__aeabi_dsub>
 8005a34:	a356      	add	r3, pc, #344	; (adr r3, 8005b90 <__ieee754_pow+0x3a0>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	f7fa fd8b 	bl	8000558 <__aeabi_dmul>
 8005a42:	a355      	add	r3, pc, #340	; (adr r3, 8005b98 <__ieee754_pow+0x3a8>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	4606      	mov	r6, r0
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fd82 	bl	8000558 <__aeabi_dmul>
 8005a54:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <__ieee754_pow+0x3d4>)
 8005a56:	4682      	mov	sl, r0
 8005a58:	468b      	mov	fp, r1
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f7fa fd7a 	bl	8000558 <__aeabi_dmul>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	a14d      	add	r1, pc, #308	; (adr r1, 8005ba0 <__ieee754_pow+0x3b0>)
 8005a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a6e:	f7fa fbbb 	bl	80001e8 <__aeabi_dsub>
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	f7fa fd6f 	bl	8000558 <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	2000      	movs	r0, #0
 8005a80:	4951      	ldr	r1, [pc, #324]	; (8005bc8 <__ieee754_pow+0x3d8>)
 8005a82:	f7fa fbb1 	bl	80001e8 <__aeabi_dsub>
 8005a86:	4622      	mov	r2, r4
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa fd61 	bl	8000558 <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fd5b 	bl	8000558 <__aeabi_dmul>
 8005aa2:	a341      	add	r3, pc, #260	; (adr r3, 8005ba8 <__ieee754_pow+0x3b8>)
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f7fa fd56 	bl	8000558 <__aeabi_dmul>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4650      	mov	r0, sl
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	f7fa fb98 	bl	80001e8 <__aeabi_dsub>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4680      	mov	r8, r0
 8005abe:	4689      	mov	r9, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fb92 	bl	80001ec <__adddf3>
 8005ac8:	2400      	movs	r4, #0
 8005aca:	4632      	mov	r2, r6
 8005acc:	463b      	mov	r3, r7
 8005ace:	4620      	mov	r0, r4
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	f7fa fb89 	bl	80001e8 <__aeabi_dsub>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fb83 	bl	80001e8 <__aeabi_dsub>
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	4682      	mov	sl, r0
 8005aec:	468b      	mov	fp, r1
 8005aee:	f040 81f1 	bne.w	8005ed4 <__ieee754_pow+0x6e4>
 8005af2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005bb0 <__ieee754_pow+0x3c0>
 8005af6:	eeb0 8a47 	vmov.f32	s16, s14
 8005afa:	eef0 8a67 	vmov.f32	s17, s15
 8005afe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b02:	2600      	movs	r6, #0
 8005b04:	4632      	mov	r2, r6
 8005b06:	463b      	mov	r3, r7
 8005b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b0c:	f7fa fb6c 	bl	80001e8 <__aeabi_dsub>
 8005b10:	4622      	mov	r2, r4
 8005b12:	462b      	mov	r3, r5
 8005b14:	f7fa fd20 	bl	8000558 <__aeabi_dmul>
 8005b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	4689      	mov	r9, r1
 8005b20:	4650      	mov	r0, sl
 8005b22:	4659      	mov	r1, fp
 8005b24:	f7fa fd18 	bl	8000558 <__aeabi_dmul>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4649      	mov	r1, r9
 8005b30:	f7fa fb5c 	bl	80001ec <__adddf3>
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4680      	mov	r8, r0
 8005b3a:	4689      	mov	r9, r1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa fd0a 	bl	8000558 <__aeabi_dmul>
 8005b44:	460b      	mov	r3, r1
 8005b46:	4604      	mov	r4, r0
 8005b48:	460d      	mov	r5, r1
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7fa fb4c 	bl	80001ec <__adddf3>
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <__ieee754_pow+0x3dc>)
 8005b56:	4299      	cmp	r1, r3
 8005b58:	ec45 4b19 	vmov	d9, r4, r5
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	468b      	mov	fp, r1
 8005b62:	f340 82fe 	ble.w	8006162 <__ieee754_pow+0x972>
 8005b66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005b6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005b6e:	4303      	orrs	r3, r0
 8005b70:	f000 81f0 	beq.w	8005f54 <__ieee754_pow+0x764>
 8005b74:	a310      	add	r3, pc, #64	; (adr r3, 8005bb8 <__ieee754_pow+0x3c8>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	ec51 0b18 	vmov	r0, r1, d8
 8005b7e:	f7fa fceb 	bl	8000558 <__aeabi_dmul>
 8005b82:	a30d      	add	r3, pc, #52	; (adr r3, 8005bb8 <__ieee754_pow+0x3c8>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	e6cb      	b.n	8005922 <__ieee754_pow+0x132>
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w
 8005b90:	60000000 	.word	0x60000000
 8005b94:	3ff71547 	.word	0x3ff71547
 8005b98:	f85ddf44 	.word	0xf85ddf44
 8005b9c:	3e54ae0b 	.word	0x3e54ae0b
 8005ba0:	55555555 	.word	0x55555555
 8005ba4:	3fd55555 	.word	0x3fd55555
 8005ba8:	652b82fe 	.word	0x652b82fe
 8005bac:	3ff71547 	.word	0x3ff71547
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	bff00000 	.word	0xbff00000
 8005bb8:	8800759c 	.word	0x8800759c
 8005bbc:	7e37e43c 	.word	0x7e37e43c
 8005bc0:	3ff00000 	.word	0x3ff00000
 8005bc4:	3fd00000 	.word	0x3fd00000
 8005bc8:	3fe00000 	.word	0x3fe00000
 8005bcc:	408fffff 	.word	0x408fffff
 8005bd0:	4bd7      	ldr	r3, [pc, #860]	; (8005f30 <__ieee754_pow+0x740>)
 8005bd2:	ea03 0309 	and.w	r3, r3, r9
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	b92b      	cbnz	r3, 8005be6 <__ieee754_pow+0x3f6>
 8005bda:	4bd6      	ldr	r3, [pc, #856]	; (8005f34 <__ieee754_pow+0x744>)
 8005bdc:	f7fa fcbc 	bl	8000558 <__aeabi_dmul>
 8005be0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005be4:	460c      	mov	r4, r1
 8005be6:	1523      	asrs	r3, r4, #20
 8005be8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005bec:	4413      	add	r3, r2
 8005bee:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf0:	4bd1      	ldr	r3, [pc, #836]	; (8005f38 <__ieee754_pow+0x748>)
 8005bf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005bf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005bfa:	429c      	cmp	r4, r3
 8005bfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005c00:	dd08      	ble.n	8005c14 <__ieee754_pow+0x424>
 8005c02:	4bce      	ldr	r3, [pc, #824]	; (8005f3c <__ieee754_pow+0x74c>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	f340 8163 	ble.w	8005ed0 <__ieee754_pow+0x6e0>
 8005c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005c14:	2400      	movs	r4, #0
 8005c16:	00e3      	lsls	r3, r4, #3
 8005c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c1a:	4bc9      	ldr	r3, [pc, #804]	; (8005f40 <__ieee754_pow+0x750>)
 8005c1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c20:	ed93 7b00 	vldr	d7, [r3]
 8005c24:	4629      	mov	r1, r5
 8005c26:	ec53 2b17 	vmov	r2, r3, d7
 8005c2a:	eeb0 8a47 	vmov.f32	s16, s14
 8005c2e:	eef0 8a67 	vmov.f32	s17, s15
 8005c32:	4682      	mov	sl, r0
 8005c34:	f7fa fad8 	bl	80001e8 <__aeabi_dsub>
 8005c38:	4652      	mov	r2, sl
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460f      	mov	r7, r1
 8005c3e:	462b      	mov	r3, r5
 8005c40:	ec51 0b18 	vmov	r0, r1, d8
 8005c44:	f7fa fad2 	bl	80001ec <__adddf3>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	49bd      	ldr	r1, [pc, #756]	; (8005f44 <__ieee754_pow+0x754>)
 8005c50:	f7fa fdac 	bl	80007ac <__aeabi_ddiv>
 8005c54:	ec41 0b19 	vmov	d9, r0, r1
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f7fa fc7a 	bl	8000558 <__aeabi_dmul>
 8005c64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c78:	46ab      	mov	fp, r5
 8005c7a:	106d      	asrs	r5, r5, #1
 8005c7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005c84:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4614      	mov	r4, r2
 8005c90:	461d      	mov	r5, r3
 8005c92:	f7fa fc61 	bl	8000558 <__aeabi_dmul>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa faa3 	bl	80001e8 <__aeabi_dsub>
 8005ca2:	ec53 2b18 	vmov	r2, r3, d8
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f7fa fa9b 	bl	80001e8 <__aeabi_dsub>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	4659      	mov	r1, fp
 8005cba:	f7fa fa95 	bl	80001e8 <__aeabi_dsub>
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	f7fa fc49 	bl	8000558 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f7fa fa8b 	bl	80001e8 <__aeabi_dsub>
 8005cd2:	ec53 2b19 	vmov	r2, r3, d9
 8005cd6:	f7fa fc3f 	bl	8000558 <__aeabi_dmul>
 8005cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cde:	ec41 0b18 	vmov	d8, r0, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fa fc37 	bl	8000558 <__aeabi_dmul>
 8005cea:	a37d      	add	r3, pc, #500	; (adr r3, 8005ee0 <__ieee754_pow+0x6f0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	f7fa fc30 	bl	8000558 <__aeabi_dmul>
 8005cf8:	a37b      	add	r3, pc, #492	; (adr r3, 8005ee8 <__ieee754_pow+0x6f8>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fa75 	bl	80001ec <__adddf3>
 8005d02:	4622      	mov	r2, r4
 8005d04:	462b      	mov	r3, r5
 8005d06:	f7fa fc27 	bl	8000558 <__aeabi_dmul>
 8005d0a:	a379      	add	r3, pc, #484	; (adr r3, 8005ef0 <__ieee754_pow+0x700>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fa6c 	bl	80001ec <__adddf3>
 8005d14:	4622      	mov	r2, r4
 8005d16:	462b      	mov	r3, r5
 8005d18:	f7fa fc1e 	bl	8000558 <__aeabi_dmul>
 8005d1c:	a376      	add	r3, pc, #472	; (adr r3, 8005ef8 <__ieee754_pow+0x708>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fa63 	bl	80001ec <__adddf3>
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	f7fa fc15 	bl	8000558 <__aeabi_dmul>
 8005d2e:	a374      	add	r3, pc, #464	; (adr r3, 8005f00 <__ieee754_pow+0x710>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f7fa fa5a 	bl	80001ec <__adddf3>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	f7fa fc0c 	bl	8000558 <__aeabi_dmul>
 8005d40:	a371      	add	r3, pc, #452	; (adr r3, 8005f08 <__ieee754_pow+0x718>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	f7fa fa51 	bl	80001ec <__adddf3>
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	460f      	mov	r7, r1
 8005d50:	462b      	mov	r3, r5
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fbff 	bl	8000558 <__aeabi_dmul>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	f7fa fbf9 	bl	8000558 <__aeabi_dmul>
 8005d66:	4642      	mov	r2, r8
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d72:	f7fa fa3b 	bl	80001ec <__adddf3>
 8005d76:	ec53 2b18 	vmov	r2, r3, d8
 8005d7a:	f7fa fbed 	bl	8000558 <__aeabi_dmul>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f7fa fa33 	bl	80001ec <__adddf3>
 8005d86:	4642      	mov	r2, r8
 8005d88:	4682      	mov	sl, r0
 8005d8a:	468b      	mov	fp, r1
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	4640      	mov	r0, r8
 8005d90:	4649      	mov	r1, r9
 8005d92:	f7fa fbe1 	bl	8000558 <__aeabi_dmul>
 8005d96:	4b6c      	ldr	r3, [pc, #432]	; (8005f48 <__ieee754_pow+0x758>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	460f      	mov	r7, r1
 8005d9e:	f7fa fa25 	bl	80001ec <__adddf3>
 8005da2:	4652      	mov	r2, sl
 8005da4:	465b      	mov	r3, fp
 8005da6:	f7fa fa21 	bl	80001ec <__adddf3>
 8005daa:	9c04      	ldr	r4, [sp, #16]
 8005dac:	460d      	mov	r5, r1
 8005dae:	4622      	mov	r2, r4
 8005db0:	460b      	mov	r3, r1
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fbcf 	bl	8000558 <__aeabi_dmul>
 8005dba:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <__ieee754_pow+0x758>)
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	4689      	mov	r9, r1
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fa fa0f 	bl	80001e8 <__aeabi_dsub>
 8005dca:	4632      	mov	r2, r6
 8005dcc:	463b      	mov	r3, r7
 8005dce:	f7fa fa0b 	bl	80001e8 <__aeabi_dsub>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	4659      	mov	r1, fp
 8005dda:	f7fa fa05 	bl	80001e8 <__aeabi_dsub>
 8005dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005de2:	f7fa fbb9 	bl	8000558 <__aeabi_dmul>
 8005de6:	4622      	mov	r2, r4
 8005de8:	4606      	mov	r6, r0
 8005dea:	460f      	mov	r7, r1
 8005dec:	462b      	mov	r3, r5
 8005dee:	ec51 0b18 	vmov	r0, r1, d8
 8005df2:	f7fa fbb1 	bl	8000558 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f7fa f9f5 	bl	80001ec <__adddf3>
 8005e02:	4606      	mov	r6, r0
 8005e04:	460f      	mov	r7, r1
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa f9ed 	bl	80001ec <__adddf3>
 8005e12:	9c04      	ldr	r4, [sp, #16]
 8005e14:	a33e      	add	r3, pc, #248	; (adr r3, 8005f10 <__ieee754_pow+0x720>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	f7fa fb9b 	bl	8000558 <__aeabi_dmul>
 8005e22:	4642      	mov	r2, r8
 8005e24:	ec41 0b18 	vmov	d8, r0, r1
 8005e28:	464b      	mov	r3, r9
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f7fa f9db 	bl	80001e8 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa f9d5 	bl	80001e8 <__aeabi_dsub>
 8005e3e:	a336      	add	r3, pc, #216	; (adr r3, 8005f18 <__ieee754_pow+0x728>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa fb88 	bl	8000558 <__aeabi_dmul>
 8005e48:	a335      	add	r3, pc, #212	; (adr r3, 8005f20 <__ieee754_pow+0x730>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa fb7f 	bl	8000558 <__aeabi_dmul>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa f9c3 	bl	80001ec <__adddf3>
 8005e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e68:	4b38      	ldr	r3, [pc, #224]	; (8005f4c <__ieee754_pow+0x75c>)
 8005e6a:	4413      	add	r3, r2
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa f9bc 	bl	80001ec <__adddf3>
 8005e74:	4682      	mov	sl, r0
 8005e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e78:	468b      	mov	fp, r1
 8005e7a:	f7fa fb03 	bl	8000484 <__aeabi_i2d>
 8005e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e80:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <__ieee754_pow+0x760>)
 8005e82:	4413      	add	r3, r2
 8005e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e88:	4606      	mov	r6, r0
 8005e8a:	460f      	mov	r7, r1
 8005e8c:	4652      	mov	r2, sl
 8005e8e:	465b      	mov	r3, fp
 8005e90:	ec51 0b18 	vmov	r0, r1, d8
 8005e94:	f7fa f9aa 	bl	80001ec <__adddf3>
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	f7fa f9a6 	bl	80001ec <__adddf3>
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	f7fa f9a2 	bl	80001ec <__adddf3>
 8005ea8:	9c04      	ldr	r4, [sp, #16]
 8005eaa:	4632      	mov	r2, r6
 8005eac:	463b      	mov	r3, r7
 8005eae:	4620      	mov	r0, r4
 8005eb0:	460d      	mov	r5, r1
 8005eb2:	f7fa f999 	bl	80001e8 <__aeabi_dsub>
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	464b      	mov	r3, r9
 8005eba:	f7fa f995 	bl	80001e8 <__aeabi_dsub>
 8005ebe:	ec53 2b18 	vmov	r2, r3, d8
 8005ec2:	f7fa f991 	bl	80001e8 <__aeabi_dsub>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4650      	mov	r0, sl
 8005ecc:	4659      	mov	r1, fp
 8005ece:	e606      	b.n	8005ade <__ieee754_pow+0x2ee>
 8005ed0:	2401      	movs	r4, #1
 8005ed2:	e6a0      	b.n	8005c16 <__ieee754_pow+0x426>
 8005ed4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005f28 <__ieee754_pow+0x738>
 8005ed8:	e60d      	b.n	8005af6 <__ieee754_pow+0x306>
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w
 8005ee0:	4a454eef 	.word	0x4a454eef
 8005ee4:	3fca7e28 	.word	0x3fca7e28
 8005ee8:	93c9db65 	.word	0x93c9db65
 8005eec:	3fcd864a 	.word	0x3fcd864a
 8005ef0:	a91d4101 	.word	0xa91d4101
 8005ef4:	3fd17460 	.word	0x3fd17460
 8005ef8:	518f264d 	.word	0x518f264d
 8005efc:	3fd55555 	.word	0x3fd55555
 8005f00:	db6fabff 	.word	0xdb6fabff
 8005f04:	3fdb6db6 	.word	0x3fdb6db6
 8005f08:	33333303 	.word	0x33333303
 8005f0c:	3fe33333 	.word	0x3fe33333
 8005f10:	e0000000 	.word	0xe0000000
 8005f14:	3feec709 	.word	0x3feec709
 8005f18:	dc3a03fd 	.word	0xdc3a03fd
 8005f1c:	3feec709 	.word	0x3feec709
 8005f20:	145b01f5 	.word	0x145b01f5
 8005f24:	be3e2fe0 	.word	0xbe3e2fe0
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	3ff00000 	.word	0x3ff00000
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	43400000 	.word	0x43400000
 8005f38:	0003988e 	.word	0x0003988e
 8005f3c:	000bb679 	.word	0x000bb679
 8005f40:	08006698 	.word	0x08006698
 8005f44:	3ff00000 	.word	0x3ff00000
 8005f48:	40080000 	.word	0x40080000
 8005f4c:	080066b8 	.word	0x080066b8
 8005f50:	080066a8 	.word	0x080066a8
 8005f54:	a3b5      	add	r3, pc, #724	; (adr r3, 800622c <__ieee754_pow+0xa3c>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	f7fa f945 	bl	80001ec <__adddf3>
 8005f62:	4622      	mov	r2, r4
 8005f64:	ec41 0b1a 	vmov	d10, r0, r1
 8005f68:	462b      	mov	r3, r5
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	f7fa f93b 	bl	80001e8 <__aeabi_dsub>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	ec51 0b1a 	vmov	r0, r1, d10
 8005f7a:	f7fa fd7d 	bl	8000a78 <__aeabi_dcmpgt>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	f47f adf8 	bne.w	8005b74 <__ieee754_pow+0x384>
 8005f84:	4aa4      	ldr	r2, [pc, #656]	; (8006218 <__ieee754_pow+0xa28>)
 8005f86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f340 810b 	ble.w	80061a6 <__ieee754_pow+0x9b6>
 8005f90:	151b      	asrs	r3, r3, #20
 8005f92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005f96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005f9a:	fa4a f303 	asr.w	r3, sl, r3
 8005f9e:	445b      	add	r3, fp
 8005fa0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005fa4:	4e9d      	ldr	r6, [pc, #628]	; (800621c <__ieee754_pow+0xa2c>)
 8005fa6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005faa:	4116      	asrs	r6, r2
 8005fac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	ea23 0106 	bic.w	r1, r3, r6
 8005fb6:	f1c2 0214 	rsb	r2, r2, #20
 8005fba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005fbe:	fa4a fa02 	asr.w	sl, sl, r2
 8005fc2:	f1bb 0f00 	cmp.w	fp, #0
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4629      	mov	r1, r5
 8005fce:	bfb8      	it	lt
 8005fd0:	f1ca 0a00 	rsblt	sl, sl, #0
 8005fd4:	f7fa f908 	bl	80001e8 <__aeabi_dsub>
 8005fd8:	ec41 0b19 	vmov	d9, r0, r1
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	ec51 0b19 	vmov	r0, r1, d9
 8005fe4:	f7fa f902 	bl	80001ec <__adddf3>
 8005fe8:	2400      	movs	r4, #0
 8005fea:	a379      	add	r3, pc, #484	; (adr r3, 80061d0 <__ieee754_pow+0x9e0>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	f7fa fab0 	bl	8000558 <__aeabi_dmul>
 8005ff8:	ec53 2b19 	vmov	r2, r3, d9
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	460f      	mov	r7, r1
 8006000:	4620      	mov	r0, r4
 8006002:	4629      	mov	r1, r5
 8006004:	f7fa f8f0 	bl	80001e8 <__aeabi_dsub>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4640      	mov	r0, r8
 800600e:	4649      	mov	r1, r9
 8006010:	f7fa f8ea 	bl	80001e8 <__aeabi_dsub>
 8006014:	a370      	add	r3, pc, #448	; (adr r3, 80061d8 <__ieee754_pow+0x9e8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa fa9d 	bl	8000558 <__aeabi_dmul>
 800601e:	a370      	add	r3, pc, #448	; (adr r3, 80061e0 <__ieee754_pow+0x9f0>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	4680      	mov	r8, r0
 8006026:	4689      	mov	r9, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa fa94 	bl	8000558 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4640      	mov	r0, r8
 8006036:	4649      	mov	r1, r9
 8006038:	f7fa f8d8 	bl	80001ec <__adddf3>
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa f8d0 	bl	80001ec <__adddf3>
 800604c:	4632      	mov	r2, r6
 800604e:	463b      	mov	r3, r7
 8006050:	4680      	mov	r8, r0
 8006052:	4689      	mov	r9, r1
 8006054:	f7fa f8c8 	bl	80001e8 <__aeabi_dsub>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa f8c2 	bl	80001e8 <__aeabi_dsub>
 8006064:	4642      	mov	r2, r8
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	464b      	mov	r3, r9
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa fa72 	bl	8000558 <__aeabi_dmul>
 8006074:	a35c      	add	r3, pc, #368	; (adr r3, 80061e8 <__ieee754_pow+0x9f8>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	4604      	mov	r4, r0
 800607c:	460d      	mov	r5, r1
 800607e:	f7fa fa6b 	bl	8000558 <__aeabi_dmul>
 8006082:	a35b      	add	r3, pc, #364	; (adr r3, 80061f0 <__ieee754_pow+0xa00>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa f8ae 	bl	80001e8 <__aeabi_dsub>
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	f7fa fa62 	bl	8000558 <__aeabi_dmul>
 8006094:	a358      	add	r3, pc, #352	; (adr r3, 80061f8 <__ieee754_pow+0xa08>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f7fa f8a7 	bl	80001ec <__adddf3>
 800609e:	4622      	mov	r2, r4
 80060a0:	462b      	mov	r3, r5
 80060a2:	f7fa fa59 	bl	8000558 <__aeabi_dmul>
 80060a6:	a356      	add	r3, pc, #344	; (adr r3, 8006200 <__ieee754_pow+0xa10>)
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f7fa f89c 	bl	80001e8 <__aeabi_dsub>
 80060b0:	4622      	mov	r2, r4
 80060b2:	462b      	mov	r3, r5
 80060b4:	f7fa fa50 	bl	8000558 <__aeabi_dmul>
 80060b8:	a353      	add	r3, pc, #332	; (adr r3, 8006208 <__ieee754_pow+0xa18>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f7fa f895 	bl	80001ec <__adddf3>
 80060c2:	4622      	mov	r2, r4
 80060c4:	462b      	mov	r3, r5
 80060c6:	f7fa fa47 	bl	8000558 <__aeabi_dmul>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f7fa f889 	bl	80001e8 <__aeabi_dsub>
 80060d6:	4604      	mov	r4, r0
 80060d8:	460d      	mov	r5, r1
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa fa39 	bl	8000558 <__aeabi_dmul>
 80060e6:	2200      	movs	r2, #0
 80060e8:	ec41 0b19 	vmov	d9, r0, r1
 80060ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060f0:	4620      	mov	r0, r4
 80060f2:	4629      	mov	r1, r5
 80060f4:	f7fa f878 	bl	80001e8 <__aeabi_dsub>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	ec51 0b19 	vmov	r0, r1, d9
 8006100:	f7fa fb54 	bl	80007ac <__aeabi_ddiv>
 8006104:	4632      	mov	r2, r6
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
 800610a:	463b      	mov	r3, r7
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	f7fa fa22 	bl	8000558 <__aeabi_dmul>
 8006114:	4632      	mov	r2, r6
 8006116:	463b      	mov	r3, r7
 8006118:	f7fa f868 	bl	80001ec <__adddf3>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f860 	bl	80001e8 <__aeabi_dsub>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	f7fa f85c 	bl	80001e8 <__aeabi_dsub>
 8006130:	460b      	mov	r3, r1
 8006132:	4602      	mov	r2, r0
 8006134:	493a      	ldr	r1, [pc, #232]	; (8006220 <__ieee754_pow+0xa30>)
 8006136:	2000      	movs	r0, #0
 8006138:	f7fa f856 	bl	80001e8 <__aeabi_dsub>
 800613c:	e9cd 0100 	strd	r0, r1, [sp]
 8006140:	9b01      	ldr	r3, [sp, #4]
 8006142:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614a:	da2f      	bge.n	80061ac <__ieee754_pow+0x9bc>
 800614c:	4650      	mov	r0, sl
 800614e:	ed9d 0b00 	vldr	d0, [sp]
 8006152:	f000 f9cd 	bl	80064f0 <scalbn>
 8006156:	ec51 0b10 	vmov	r0, r1, d0
 800615a:	ec53 2b18 	vmov	r2, r3, d8
 800615e:	f7ff bbe0 	b.w	8005922 <__ieee754_pow+0x132>
 8006162:	4b30      	ldr	r3, [pc, #192]	; (8006224 <__ieee754_pow+0xa34>)
 8006164:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006168:	429e      	cmp	r6, r3
 800616a:	f77f af0b 	ble.w	8005f84 <__ieee754_pow+0x794>
 800616e:	4b2e      	ldr	r3, [pc, #184]	; (8006228 <__ieee754_pow+0xa38>)
 8006170:	440b      	add	r3, r1
 8006172:	4303      	orrs	r3, r0
 8006174:	d00b      	beq.n	800618e <__ieee754_pow+0x99e>
 8006176:	a326      	add	r3, pc, #152	; (adr r3, 8006210 <__ieee754_pow+0xa20>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	ec51 0b18 	vmov	r0, r1, d8
 8006180:	f7fa f9ea 	bl	8000558 <__aeabi_dmul>
 8006184:	a322      	add	r3, pc, #136	; (adr r3, 8006210 <__ieee754_pow+0xa20>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7ff bbca 	b.w	8005922 <__ieee754_pow+0x132>
 800618e:	4622      	mov	r2, r4
 8006190:	462b      	mov	r3, r5
 8006192:	f7fa f829 	bl	80001e8 <__aeabi_dsub>
 8006196:	4642      	mov	r2, r8
 8006198:	464b      	mov	r3, r9
 800619a:	f7fa fc63 	bl	8000a64 <__aeabi_dcmpge>
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f aef0 	beq.w	8005f84 <__ieee754_pow+0x794>
 80061a4:	e7e7      	b.n	8006176 <__ieee754_pow+0x986>
 80061a6:	f04f 0a00 	mov.w	sl, #0
 80061aa:	e717      	b.n	8005fdc <__ieee754_pow+0x7ec>
 80061ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061b0:	4619      	mov	r1, r3
 80061b2:	e7d2      	b.n	800615a <__ieee754_pow+0x96a>
 80061b4:	491a      	ldr	r1, [pc, #104]	; (8006220 <__ieee754_pow+0xa30>)
 80061b6:	2000      	movs	r0, #0
 80061b8:	f7ff bb9e 	b.w	80058f8 <__ieee754_pow+0x108>
 80061bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061c0:	f7ff bb9a 	b.w	80058f8 <__ieee754_pow+0x108>
 80061c4:	9000      	str	r0, [sp, #0]
 80061c6:	f7ff bb76 	b.w	80058b6 <__ieee754_pow+0xc6>
 80061ca:	2100      	movs	r1, #0
 80061cc:	f7ff bb60 	b.w	8005890 <__ieee754_pow+0xa0>
 80061d0:	00000000 	.word	0x00000000
 80061d4:	3fe62e43 	.word	0x3fe62e43
 80061d8:	fefa39ef 	.word	0xfefa39ef
 80061dc:	3fe62e42 	.word	0x3fe62e42
 80061e0:	0ca86c39 	.word	0x0ca86c39
 80061e4:	be205c61 	.word	0xbe205c61
 80061e8:	72bea4d0 	.word	0x72bea4d0
 80061ec:	3e663769 	.word	0x3e663769
 80061f0:	c5d26bf1 	.word	0xc5d26bf1
 80061f4:	3ebbbd41 	.word	0x3ebbbd41
 80061f8:	af25de2c 	.word	0xaf25de2c
 80061fc:	3f11566a 	.word	0x3f11566a
 8006200:	16bebd93 	.word	0x16bebd93
 8006204:	3f66c16c 	.word	0x3f66c16c
 8006208:	5555553e 	.word	0x5555553e
 800620c:	3fc55555 	.word	0x3fc55555
 8006210:	c2f8f359 	.word	0xc2f8f359
 8006214:	01a56e1f 	.word	0x01a56e1f
 8006218:	3fe00000 	.word	0x3fe00000
 800621c:	000fffff 	.word	0x000fffff
 8006220:	3ff00000 	.word	0x3ff00000
 8006224:	4090cbff 	.word	0x4090cbff
 8006228:	3f6f3400 	.word	0x3f6f3400
 800622c:	652b82fe 	.word	0x652b82fe
 8006230:	3c971547 	.word	0x3c971547

08006234 <__ieee754_sqrt>:
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	ec55 4b10 	vmov	r4, r5, d0
 800623c:	4e56      	ldr	r6, [pc, #344]	; (8006398 <__ieee754_sqrt+0x164>)
 800623e:	43ae      	bics	r6, r5
 8006240:	ee10 0a10 	vmov	r0, s0
 8006244:	ee10 3a10 	vmov	r3, s0
 8006248:	4629      	mov	r1, r5
 800624a:	462a      	mov	r2, r5
 800624c:	d110      	bne.n	8006270 <__ieee754_sqrt+0x3c>
 800624e:	ee10 2a10 	vmov	r2, s0
 8006252:	462b      	mov	r3, r5
 8006254:	f7fa f980 	bl	8000558 <__aeabi_dmul>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4620      	mov	r0, r4
 800625e:	4629      	mov	r1, r5
 8006260:	f7f9 ffc4 	bl	80001ec <__adddf3>
 8006264:	4604      	mov	r4, r0
 8006266:	460d      	mov	r5, r1
 8006268:	ec45 4b10 	vmov	d0, r4, r5
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	2d00      	cmp	r5, #0
 8006272:	dc10      	bgt.n	8006296 <__ieee754_sqrt+0x62>
 8006274:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006278:	4330      	orrs	r0, r6
 800627a:	d0f5      	beq.n	8006268 <__ieee754_sqrt+0x34>
 800627c:	b15d      	cbz	r5, 8006296 <__ieee754_sqrt+0x62>
 800627e:	ee10 2a10 	vmov	r2, s0
 8006282:	462b      	mov	r3, r5
 8006284:	ee10 0a10 	vmov	r0, s0
 8006288:	f7f9 ffae 	bl	80001e8 <__aeabi_dsub>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	f7fa fa8c 	bl	80007ac <__aeabi_ddiv>
 8006294:	e7e6      	b.n	8006264 <__ieee754_sqrt+0x30>
 8006296:	1509      	asrs	r1, r1, #20
 8006298:	d076      	beq.n	8006388 <__ieee754_sqrt+0x154>
 800629a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800629e:	07ce      	lsls	r6, r1, #31
 80062a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80062a4:	bf5e      	ittt	pl
 80062a6:	0fda      	lsrpl	r2, r3, #31
 80062a8:	005b      	lslpl	r3, r3, #1
 80062aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80062ae:	0fda      	lsrs	r2, r3, #31
 80062b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80062b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80062b8:	2000      	movs	r0, #0
 80062ba:	106d      	asrs	r5, r5, #1
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	f04f 0e16 	mov.w	lr, #22
 80062c2:	4684      	mov	ip, r0
 80062c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062c8:	eb0c 0401 	add.w	r4, ip, r1
 80062cc:	4294      	cmp	r4, r2
 80062ce:	bfde      	ittt	le
 80062d0:	1b12      	suble	r2, r2, r4
 80062d2:	eb04 0c01 	addle.w	ip, r4, r1
 80062d6:	1840      	addle	r0, r0, r1
 80062d8:	0052      	lsls	r2, r2, #1
 80062da:	f1be 0e01 	subs.w	lr, lr, #1
 80062de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80062e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80062e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062ea:	d1ed      	bne.n	80062c8 <__ieee754_sqrt+0x94>
 80062ec:	4671      	mov	r1, lr
 80062ee:	2720      	movs	r7, #32
 80062f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80062f4:	4562      	cmp	r2, ip
 80062f6:	eb04 060e 	add.w	r6, r4, lr
 80062fa:	dc02      	bgt.n	8006302 <__ieee754_sqrt+0xce>
 80062fc:	d113      	bne.n	8006326 <__ieee754_sqrt+0xf2>
 80062fe:	429e      	cmp	r6, r3
 8006300:	d811      	bhi.n	8006326 <__ieee754_sqrt+0xf2>
 8006302:	2e00      	cmp	r6, #0
 8006304:	eb06 0e04 	add.w	lr, r6, r4
 8006308:	da43      	bge.n	8006392 <__ieee754_sqrt+0x15e>
 800630a:	f1be 0f00 	cmp.w	lr, #0
 800630e:	db40      	blt.n	8006392 <__ieee754_sqrt+0x15e>
 8006310:	f10c 0801 	add.w	r8, ip, #1
 8006314:	eba2 020c 	sub.w	r2, r2, ip
 8006318:	429e      	cmp	r6, r3
 800631a:	bf88      	it	hi
 800631c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006320:	1b9b      	subs	r3, r3, r6
 8006322:	4421      	add	r1, r4
 8006324:	46c4      	mov	ip, r8
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	3f01      	subs	r7, #1
 800632a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800632e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006336:	d1dd      	bne.n	80062f4 <__ieee754_sqrt+0xc0>
 8006338:	4313      	orrs	r3, r2
 800633a:	d006      	beq.n	800634a <__ieee754_sqrt+0x116>
 800633c:	1c4c      	adds	r4, r1, #1
 800633e:	bf13      	iteet	ne
 8006340:	3101      	addne	r1, #1
 8006342:	3001      	addeq	r0, #1
 8006344:	4639      	moveq	r1, r7
 8006346:	f021 0101 	bicne.w	r1, r1, #1
 800634a:	1043      	asrs	r3, r0, #1
 800634c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006350:	0849      	lsrs	r1, r1, #1
 8006352:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006356:	07c2      	lsls	r2, r0, #31
 8006358:	bf48      	it	mi
 800635a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800635e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006362:	460c      	mov	r4, r1
 8006364:	463d      	mov	r5, r7
 8006366:	e77f      	b.n	8006268 <__ieee754_sqrt+0x34>
 8006368:	0ada      	lsrs	r2, r3, #11
 800636a:	3815      	subs	r0, #21
 800636c:	055b      	lsls	r3, r3, #21
 800636e:	2a00      	cmp	r2, #0
 8006370:	d0fa      	beq.n	8006368 <__ieee754_sqrt+0x134>
 8006372:	02d7      	lsls	r7, r2, #11
 8006374:	d50a      	bpl.n	800638c <__ieee754_sqrt+0x158>
 8006376:	f1c1 0420 	rsb	r4, r1, #32
 800637a:	fa23 f404 	lsr.w	r4, r3, r4
 800637e:	1e4d      	subs	r5, r1, #1
 8006380:	408b      	lsls	r3, r1
 8006382:	4322      	orrs	r2, r4
 8006384:	1b41      	subs	r1, r0, r5
 8006386:	e788      	b.n	800629a <__ieee754_sqrt+0x66>
 8006388:	4608      	mov	r0, r1
 800638a:	e7f0      	b.n	800636e <__ieee754_sqrt+0x13a>
 800638c:	0052      	lsls	r2, r2, #1
 800638e:	3101      	adds	r1, #1
 8006390:	e7ef      	b.n	8006372 <__ieee754_sqrt+0x13e>
 8006392:	46e0      	mov	r8, ip
 8006394:	e7be      	b.n	8006314 <__ieee754_sqrt+0xe0>
 8006396:	bf00      	nop
 8006398:	7ff00000 	.word	0x7ff00000

0800639c <fabs>:
 800639c:	ec51 0b10 	vmov	r0, r1, d0
 80063a0:	ee10 2a10 	vmov	r2, s0
 80063a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063a8:	ec43 2b10 	vmov	d0, r2, r3
 80063ac:	4770      	bx	lr

080063ae <finite>:
 80063ae:	b082      	sub	sp, #8
 80063b0:	ed8d 0b00 	vstr	d0, [sp]
 80063b4:	9801      	ldr	r0, [sp, #4]
 80063b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80063ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80063be:	0fc0      	lsrs	r0, r0, #31
 80063c0:	b002      	add	sp, #8
 80063c2:	4770      	bx	lr
 80063c4:	0000      	movs	r0, r0
	...

080063c8 <nan>:
 80063c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80063d0 <nan+0x8>
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	00000000 	.word	0x00000000
 80063d4:	7ff80000 	.word	0x7ff80000

080063d8 <rint>:
 80063d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063da:	ec51 0b10 	vmov	r0, r1, d0
 80063de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80063e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80063e6:	2e13      	cmp	r6, #19
 80063e8:	ee10 4a10 	vmov	r4, s0
 80063ec:	460b      	mov	r3, r1
 80063ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80063f2:	dc58      	bgt.n	80064a6 <rint+0xce>
 80063f4:	2e00      	cmp	r6, #0
 80063f6:	da2b      	bge.n	8006450 <rint+0x78>
 80063f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80063fc:	4302      	orrs	r2, r0
 80063fe:	d023      	beq.n	8006448 <rint+0x70>
 8006400:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006404:	4302      	orrs	r2, r0
 8006406:	4254      	negs	r4, r2
 8006408:	4314      	orrs	r4, r2
 800640a:	0c4b      	lsrs	r3, r1, #17
 800640c:	0b24      	lsrs	r4, r4, #12
 800640e:	045b      	lsls	r3, r3, #17
 8006410:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006414:	ea44 0103 	orr.w	r1, r4, r3
 8006418:	4b32      	ldr	r3, [pc, #200]	; (80064e4 <rint+0x10c>)
 800641a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800641e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4630      	mov	r0, r6
 8006428:	4639      	mov	r1, r7
 800642a:	f7f9 fedf 	bl	80001ec <__adddf3>
 800642e:	e9cd 0100 	strd	r0, r1, [sp]
 8006432:	463b      	mov	r3, r7
 8006434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006438:	4632      	mov	r2, r6
 800643a:	f7f9 fed5 	bl	80001e8 <__aeabi_dsub>
 800643e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006442:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006446:	4639      	mov	r1, r7
 8006448:	ec41 0b10 	vmov	d0, r0, r1
 800644c:	b003      	add	sp, #12
 800644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006450:	4a25      	ldr	r2, [pc, #148]	; (80064e8 <rint+0x110>)
 8006452:	4132      	asrs	r2, r6
 8006454:	ea01 0702 	and.w	r7, r1, r2
 8006458:	4307      	orrs	r7, r0
 800645a:	d0f5      	beq.n	8006448 <rint+0x70>
 800645c:	0851      	lsrs	r1, r2, #1
 800645e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006462:	4314      	orrs	r4, r2
 8006464:	d00c      	beq.n	8006480 <rint+0xa8>
 8006466:	ea23 0201 	bic.w	r2, r3, r1
 800646a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800646e:	2e13      	cmp	r6, #19
 8006470:	fa43 f606 	asr.w	r6, r3, r6
 8006474:	bf0c      	ite	eq
 8006476:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800647a:	2400      	movne	r4, #0
 800647c:	ea42 0306 	orr.w	r3, r2, r6
 8006480:	4918      	ldr	r1, [pc, #96]	; (80064e4 <rint+0x10c>)
 8006482:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006486:	4622      	mov	r2, r4
 8006488:	e9d5 4500 	ldrd	r4, r5, [r5]
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7f9 feac 	bl	80001ec <__adddf3>
 8006494:	e9cd 0100 	strd	r0, r1, [sp]
 8006498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800649c:	4622      	mov	r2, r4
 800649e:	462b      	mov	r3, r5
 80064a0:	f7f9 fea2 	bl	80001e8 <__aeabi_dsub>
 80064a4:	e7d0      	b.n	8006448 <rint+0x70>
 80064a6:	2e33      	cmp	r6, #51	; 0x33
 80064a8:	dd07      	ble.n	80064ba <rint+0xe2>
 80064aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80064ae:	d1cb      	bne.n	8006448 <rint+0x70>
 80064b0:	ee10 2a10 	vmov	r2, s0
 80064b4:	f7f9 fe9a 	bl	80001ec <__adddf3>
 80064b8:	e7c6      	b.n	8006448 <rint+0x70>
 80064ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80064be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80064c2:	40d6      	lsrs	r6, r2
 80064c4:	4230      	tst	r0, r6
 80064c6:	d0bf      	beq.n	8006448 <rint+0x70>
 80064c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80064cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80064d0:	bf1f      	itttt	ne
 80064d2:	ea24 0101 	bicne.w	r1, r4, r1
 80064d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80064da:	fa44 f202 	asrne.w	r2, r4, r2
 80064de:	ea41 0402 	orrne.w	r4, r1, r2
 80064e2:	e7cd      	b.n	8006480 <rint+0xa8>
 80064e4:	080066c8 	.word	0x080066c8
 80064e8:	000fffff 	.word	0x000fffff
 80064ec:	00000000 	.word	0x00000000

080064f0 <scalbn>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	ec55 4b10 	vmov	r4, r5, d0
 80064f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80064fa:	4606      	mov	r6, r0
 80064fc:	462b      	mov	r3, r5
 80064fe:	b99a      	cbnz	r2, 8006528 <scalbn+0x38>
 8006500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006504:	4323      	orrs	r3, r4
 8006506:	d036      	beq.n	8006576 <scalbn+0x86>
 8006508:	4b39      	ldr	r3, [pc, #228]	; (80065f0 <scalbn+0x100>)
 800650a:	4629      	mov	r1, r5
 800650c:	ee10 0a10 	vmov	r0, s0
 8006510:	2200      	movs	r2, #0
 8006512:	f7fa f821 	bl	8000558 <__aeabi_dmul>
 8006516:	4b37      	ldr	r3, [pc, #220]	; (80065f4 <scalbn+0x104>)
 8006518:	429e      	cmp	r6, r3
 800651a:	4604      	mov	r4, r0
 800651c:	460d      	mov	r5, r1
 800651e:	da10      	bge.n	8006542 <scalbn+0x52>
 8006520:	a32b      	add	r3, pc, #172	; (adr r3, 80065d0 <scalbn+0xe0>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	e03a      	b.n	800659e <scalbn+0xae>
 8006528:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800652c:	428a      	cmp	r2, r1
 800652e:	d10c      	bne.n	800654a <scalbn+0x5a>
 8006530:	ee10 2a10 	vmov	r2, s0
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	f7f9 fe58 	bl	80001ec <__adddf3>
 800653c:	4604      	mov	r4, r0
 800653e:	460d      	mov	r5, r1
 8006540:	e019      	b.n	8006576 <scalbn+0x86>
 8006542:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006546:	460b      	mov	r3, r1
 8006548:	3a36      	subs	r2, #54	; 0x36
 800654a:	4432      	add	r2, r6
 800654c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006550:	428a      	cmp	r2, r1
 8006552:	dd08      	ble.n	8006566 <scalbn+0x76>
 8006554:	2d00      	cmp	r5, #0
 8006556:	a120      	add	r1, pc, #128	; (adr r1, 80065d8 <scalbn+0xe8>)
 8006558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800655c:	da1c      	bge.n	8006598 <scalbn+0xa8>
 800655e:	a120      	add	r1, pc, #128	; (adr r1, 80065e0 <scalbn+0xf0>)
 8006560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006564:	e018      	b.n	8006598 <scalbn+0xa8>
 8006566:	2a00      	cmp	r2, #0
 8006568:	dd08      	ble.n	800657c <scalbn+0x8c>
 800656a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800656e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006572:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006576:	ec45 4b10 	vmov	d0, r4, r5
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006580:	da19      	bge.n	80065b6 <scalbn+0xc6>
 8006582:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006586:	429e      	cmp	r6, r3
 8006588:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800658c:	dd0a      	ble.n	80065a4 <scalbn+0xb4>
 800658e:	a112      	add	r1, pc, #72	; (adr r1, 80065d8 <scalbn+0xe8>)
 8006590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e2      	bne.n	800655e <scalbn+0x6e>
 8006598:	a30f      	add	r3, pc, #60	; (adr r3, 80065d8 <scalbn+0xe8>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7f9 ffdb 	bl	8000558 <__aeabi_dmul>
 80065a2:	e7cb      	b.n	800653c <scalbn+0x4c>
 80065a4:	a10a      	add	r1, pc, #40	; (adr r1, 80065d0 <scalbn+0xe0>)
 80065a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0b8      	beq.n	8006520 <scalbn+0x30>
 80065ae:	a10e      	add	r1, pc, #56	; (adr r1, 80065e8 <scalbn+0xf8>)
 80065b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b4:	e7b4      	b.n	8006520 <scalbn+0x30>
 80065b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065ba:	3236      	adds	r2, #54	; 0x36
 80065bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80065c4:	4620      	mov	r0, r4
 80065c6:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <scalbn+0x108>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	e7e8      	b.n	800659e <scalbn+0xae>
 80065cc:	f3af 8000 	nop.w
 80065d0:	c2f8f359 	.word	0xc2f8f359
 80065d4:	01a56e1f 	.word	0x01a56e1f
 80065d8:	8800759c 	.word	0x8800759c
 80065dc:	7e37e43c 	.word	0x7e37e43c
 80065e0:	8800759c 	.word	0x8800759c
 80065e4:	fe37e43c 	.word	0xfe37e43c
 80065e8:	c2f8f359 	.word	0xc2f8f359
 80065ec:	81a56e1f 	.word	0x81a56e1f
 80065f0:	43500000 	.word	0x43500000
 80065f4:	ffff3cb0 	.word	0xffff3cb0
 80065f8:	3c900000 	.word	0x3c900000

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
